AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  OpsAssistant

  Implementing a Security Assistant using Bedrock Agent

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300
  Api:
    EndpointConfiguration: REGIONAL

Parameters:
  WAFLogGroup:
    Type: String
    Description: WAF Cloudwatch log group
  WAFLogRegion:
    Type: String
    Description: WAF Cloudwatch log region
  GuarddutyDetectorID:
    Type: String
    Description: Guardduty Detector ID
  # AgentID:
  #   Type: String
  #   Description: Bedrock Agent ID
  SNSTopicsARN:
    Type: String
    Description: SNS Topics ARN
  AuthToken:
    Type: String
    Description: API Gateway Authorizer Token
  BedrockKB:
    Type: String
    Description: Bedrock knowledge ID
  AthenaWorkgroup:
    Type: String
    Description: Athena Workgroup

Resources:
  ToolsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
  AuthorizerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/authorizer/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          AUTH_TOKEN: !Ref AuthToken
  # EC2Function:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     PackageType: Image
  #     Architectures:
  #       - x86_64
  #     Events:
  #       OpsAssistant:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           Path: /tools/ec2
  #           Method: post
  #     Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
  #       Variables:
  #         REGION: !Ref AWS::Region
  #         AGENT_ID: !Ref AgentID
  #         LOG_LEVEL: INFO
  #         ATHENA_BUCKET_NAME: chatbot-stack-athena-bucket-032998046382
  #         TEXT2SQL_DATABASE: dynamic_examples.csv
  #         FEWSHOT_EXAMPLES_PATH: chatbot-stack-text2sql-db
  #     Policies:
  #       - AdministratorAccess
  #   Metadata:
  #     Dockerfile: Dockerfile
  #     DockerContext: ./code/ec2
  #     DockerTag: OpsAssistant-v1
  WafFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: code/waf/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        OpsAssistant:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ToolsApi
            Path: /tools/waf
            Method: post
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          WAF_LOG_GROUP: !Ref WAFLogGroup
          WAF_LOG_REGION: !Ref WAFLogRegion
      Policies:
        - Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
              - logs:StartQuery
              - logs:GetQueryResults
            Resource:
              - !Sub arn:${AWS::Partition}:logs:*:*:log-group:*
  GuarddutyFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: code/guardduty/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        OpsAssistant:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ToolsApi
            Path: /tools/guardduty
            Method: post
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          REGION: !Ref AWS::Region
          DETECTOR_ID: !Ref GuarddutyDetectorID
      Policies:
        - Statement:
          - Sid: GuarddutyPolicy
            Effect: Allow
            Action:
              - guardduty:ListFindings
              - guardduty:GetFindings
            Resource: "*"
  InspectorFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: code/inspector/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        OpsAssistant:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ToolsApi
            Path: /tools/inspector
            Method: post
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          REGION: !Ref AWS::Region
      Policies:
        - Statement:
          - Sid: InspectorPolicy
            Effect: Allow
            Action:
              - inspector2:ListFindings
              - inspector2:GetFinding
            Resource: "*"
  IoTSecurityFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/iotsecurity/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        OpsAssistant:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ToolsApi
            Path: /tools/iotsecurity
            Method: post
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          REGION: !Ref AWS::Region
      Policies:
        - Statement:
          - Sid: InspectorPolicy
            Effect: Allow
            Action:
              - iot:ListAuditFindings
              - iot:DescribeAuditFinding
            Resource: "*"
  BedrockKBFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/bedrock/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        OpsAssistant:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ToolsApi
            Path: /tools/bedrock_kb
            Method: post
      Environment:
        Variables:
          BEDROCK_KB_ID: !Ref BedrockKB
      Policies:
        - Statement:
          - Sid: BedrockKBPolicy
            Effect: Allow
            Action:
              - bedrock:GetKnowledgeBase
              - bedrock:ListKnowledgeBases
            Resource:
              - !Sub arn:${AWS::Partition}:bedrock:*:*:knowledge-base/*
  AthenaFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/athena/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        OpsAssistant:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ToolsApi
            Path: /tools/athena
            Method: post
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          ATHENA_WORKGROUP: !Ref AthenaWorkgroup
      Policies:
        - Statement:
          - Sid: BedrockPolicy
            Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource:
              - !Sub arn:${AWS::Partition}:bedrock:*::foundation-model/*
          - Sid: AthenaPolicy
            Effect: Allow
            Action:
              - athena:GetQueryResults
              - athena:StartQueryExecution
              - athena:GetQueryExecution
            Resource: "*"
          - Sid: S3Policy
            Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:GetBucketLocation
              - s3:PutObject
              - s3:PutObjectTagging
              - s3:GetObjectTagging
            Resource: "*"
          - Sid: GluePolicy
            Effect: Allow
            Action:
              - glue:GetTables
              - glue:GetTable
              - glue:GetDatabases
              - glue:GetDatabase
            Resource: "*"
          - Sid: KMSPolicy
            Effect: Allow
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
              - kms:Encrypt
            Resource: "*"
  ReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: code/reports/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          SNS_TOPICS_ARN: !Ref SNSTopicsARN
          WAF_FUNCTION_ARN: !GetAtt WafFunction.Arn
          GUARDDUTY_FUNCTION_ARN: !GetAtt GuarddutyFunction.Arn
          INSPECTOR_FUNCTION_ARN: !GetAtt InspectorFunction.Arn
          IOTSECURITY_FUNCTION_ARN: !GetAtt IoTSecurityFunction.Arn
      Events:
        SecurityReports:
          Type: Schedule
          Properties:
            Schedule: cron(0 1 ? * 2 *)
            Name: SecurityReports
            Description: Schedule to generate daily reports
            Enabled: True
            Input:
              '{
                "security_service": ["waf", "guardduty", "inspector","iotsecurity"],
                "report_period": "weekly"
              }'
      Policies:
        - Statement:
          - Sid: Bedrock
            Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource:
              - !Sub arn:${AWS::Partition}:bedrock:*::foundation-model/*
          - Sid: SNSPolicy
            Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Sub ${SNSTopicsARN}
          - Sid: DynamoDBPolicy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
            Resource:
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/SecurityReportsTable
          - Sid: LambdaInvokePolicy
            Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
  SecurityReportsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: SecurityReportsTable
      Tags:
        APP: OpsAssistant
        ENV: PROD
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  OpsAssistantApi:
    Description: "API Gateway endpoint URL for Prod stage for Ops Assistant function"
    Value: !Sub "https://${ToolsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tools"
  WafFunction:
    Description: "WAF Lambda Function ARN"
    Value: !GetAtt WafFunction.Arn
  WafFunctionIamRole:
    Description: "Implicit IAM Role created for Ops Assistant function"
    Value: !GetAtt WafFunctionRole.Arn
