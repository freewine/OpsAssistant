AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  OpsAssistant

  Implementing a Security Assistant using Bedrock Agent

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300
  Api:
    EndpointConfiguration: REGIONAL

Parameters:
  WAFLogGroup:
    Type: String
    Description: WAF Cloudwatch log group
  WAFLogRegion:
    Type: String
    Description: WAF Cloudwatch log region
  GuarddutyDetectorID:
    Type: String
    Description: Guardduty Detector ID
  # AgentID:
  #   Type: String
  #   Description: Bedrock Agent ID
  SNSTopicsARN:
    Type: String
    Description: SNS Topics ARN
  AuthToken:
    Type: String
    Description: API Gateway Authorizer Token

Resources:
  ToolsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
  AuthorizerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/authorizer/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          AUTH_TOKEN: !Ref AuthToken
      Policies:
        - AdministratorAccess  
  # EC2Function:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     PackageType: Image
  #     Architectures:
  #       - x86_64
  #     Events:
  #       OpsAssistant:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           Path: /tools/ec2
  #           Method: post
  #     Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
  #       Variables:
  #         REGION: !Ref AWS::Region
  #         AGENT_ID: !Ref AgentID
  #         LOG_LEVEL: INFO
  #         ATHENA_BUCKET_NAME: chatbot-stack-athena-bucket-032998046382
  #         TEXT2SQL_DATABASE: dynamic_examples.csv
  #         FEWSHOT_EXAMPLES_PATH: chatbot-stack-text2sql-db
  #     Policies:
  #       - AdministratorAccess
  #   Metadata:
  #     Dockerfile: Dockerfile
  #     DockerContext: ./code/ec2
  #     DockerTag: OpsAssistant-v1
  WafFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: code/waf/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        OpsAssistant:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ToolsApi
            Path: /tools/waf
            Method: post
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          WAF_LOG_GROUP: !Ref WAFLogGroup
          WAF_LOG_REGION: !Ref WAFLogRegion
      Policies:
        - AdministratorAccess
  GuarddutyFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: code/guardduty/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        OpsAssistant:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ToolsApi
            Path: /tools/guardduty
            Method: post
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          REGION: !Ref AWS::Region
          DETECTOR_ID: !Ref GuarddutyDetectorID
      Policies:
        - AdministratorAccess  
  InspectorFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: code/inspector/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        OpsAssistant:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ToolsApi
            Path: /tools/inspector
            Method: post
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          REGION: !Ref AWS::Region
      Policies:
        - AdministratorAccess  
  IoTSecurityFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/iotsecurity/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        OpsAssistant:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ToolsApi
            Path: /tools/iotsecurity
            Method: post
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          REGION: !Ref AWS::Region
      Policies:
        - AdministratorAccess  
  BedrockKBFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/bedrock/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        OpsAssistant:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ToolsApi
            Path: /tools/bedrock_kb
            Method: post
      Policies:
        - AdministratorAccess  
  ReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: code/reports/
      Handler: generate_report.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          SNS_TOPICS_ARN: !Ref SNSTopicsARN
      Events:
        SecurityReports:
          Type: Schedule
          Properties:
            Schedule: cron(0 1 * * ? *)
            Name: SecurityReports
            Description: Schedule to generate daily reports
            Enabled: True
            Input:
              '{
                "report_type": "waf",
                "report_period": "daily"
              }'
      Policies:
        - AdministratorAccess  
        - Statement:
            - Sid: SNSPolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Sub ${SNSTopicsARN}
            - Sid: DynamoDBPolicy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/SecurityReportsTable
  SecurityReportsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: SecurityReportsTable
      PrimaryKey: 
        Name: report_type
        Type: String
      Tags:
        APP: OpsAssistant
        ENV: PROD
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  OpsAssistantApi:
    Description: "API Gateway endpoint URL for Prod stage for Ops Assistant function"
    Value: !Sub "https://${ToolsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tools"
  WafFunction:
    Description: "WAF Lambda Function ARN"
    Value: !GetAtt WafFunction.Arn
  WafFunctionIamRole:
    Description: "Implicit IAM Role created for Ops Assistant function"
    Value: !GetAtt WafFunctionRole.Arn
