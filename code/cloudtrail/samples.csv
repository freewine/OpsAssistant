Query name,Query description,Query SQL
Investigate who called an API,Find all principal IDs who called a particular API on a particular day.,"SELECT userIdentity.arn AS user, eventName FROM $EDS_ID WHERE userIdentity.arn IS NOT NULL AND eventName='CreateBucket' AND eventTime > '2024-06-25 00:00:00' AND eventTime < '2024-06-26 00:00:00'"
Investigate user actions,Find all the APIs that a particular user called in a specified date range.,"SELECT eventID, eventName, eventSource, eventTime, userIdentity.arn AS user FROM $EDS_ID WHERE userIdentity.arn LIKE '%<username>%' AND eventTime > '2024-06-25 00:00:00' AND eventTime < '2024-06-28 00:00:00'"
Top APIs aggregated by source,Find the number of API calls grouped by event name and event source within the past week,"SELECT eventSource, eventName, COUNT(*) AS apiCount FROM $EDS_ID WHERE eventTime > '2024-06-25 00:00:00' GROUP BY eventSource, eventName ORDER BY apiCount DESC"
Multi-region console logins,Find all users who logged into the console from a set of regions within the past week.,"SELECT eventTime, userIdentity.arn AS user, awsRegion FROM $EDS_ID WHERE awsRegion in ('us-east-1', 'us-west-2') AND eventName = 'ConsoleLogin' AND eventTime > '2024-06-25 00:00:00'"
Explore queries,Find all the CloudTrail queries that were ran within the past week.,"SELECT element_at(responseElements, 'queryId'), element_at(requestParameters, 'queryStatement') FROM $EDS_ID WHERE eventName='StartQuery' AND eventSource = 'cloudtrail.amazonaws.com' AND responseElements IS NOT NULL AND eventTime > '2024-06-25 00:00:00'"
Find most frequent console users,Find users who signed in to the console the most within the past week.,"SELECT userIdentity.arn, COUNT(*) AS loginCount FROM $EDS_ID WHERE eventName = 'ConsoleLogin' AND eventTime > '2024-06-25 00:00:00' GROUP BY userIdentity.arn ORDER BY count(*) DESC"
List specific calls,Find all PutObject calls for a particular S3 bucket within the past week.,"SELECT requestParameters FROM $EDS_ID WHERE userIdentity.arn IS NOT NULL AND eventName='PutObject' AND element_at(requestParameters, 'bucketName') = 'bucketnamehere' AND eventTime > '2024-06-25 00:00:00'"
Filter array of structures,Filter out resources by matching ARN values within the past week.,"SELECT resources FROM $EDS_ID WHERE element_at(resources, 1).arn LIKE '%<resource ARN>%' AND eventTime > '2024-06-25 00:00:00'"
Rank the number of stored events per day,Query the event data store over the past month to rank the number of events ingested each day.,"SELECT date_trunc('day', eventtime), COUNT(*) AS eventCount FROM $EDS_ID WHERE eventTime > '2024-06-02 00:00:00' GROUP BY date_trunc('day', eventtime) ORDER BY count(*) DESC"
Count calls per service that were made using outdated TLS versions,Find the number of calls per service that used the outdated Transport Layer Security (TLS) versions 1.0 and 1.1 within the past week.,"SELECT eventSource, COUNT(*) AS numOutdatedTlsCalls FROM $EDS_ID WHERE tlsDetails.tlsVersion IN ('TLSv1', 'TLSv1.1') AND eventTime > '2024-06-25 00:00:00' GROUP BY eventSource ORDER BY numOutdatedTlsCalls DESC"
Find who is making calls using outdated TLS versions,Find the callers who used outdated Transport Layer Security (TLS) versions 1.0 and 1.1 within the past week grouped by the number of calls per service.,"SELECT recipientAccountId, year(eventTime) AS year_date, month(eventTime) AS month_date, eventSource, sourceIPAddress, userAgent, userIdentity.arn, userIdentity.accesskeyid, COUNT(*) AS numCalls FROM $EDS_ID WHERE tlsDetails.tlsVersion IN ('TLSv1', 'TLSv1.1') AND eventTime > '2024-06-25 00:00:00' GROUP BY recipientAccountId, year(eventTime), month(eventTime), eventSource, sourceIPAddress, userAgent, userIdentity.arn, userIdentity.accesskeyid ORDER BY COUNT(*) DESC"
Investigate who made console changes,Find users with write permissions who made changes using the console within the past week.,"SELECT userIdentity.arn AS user, eventName, eventTime, awsRegion, requestParameters AS resourceChangedManually FROM $EDS_ID WHERE sessionCredentialFromConsole='true' AND errorCode IS NULL AND eventTime > '2024-06-25 00:00:00'"
Investigate who ran ECS Commands,Find users who logged into the running container and ran commands within the past week.,"SELECT userIdentity.arn AS user, element_at(requestParameters, 'container') AS container, element_at(requestParameters, 'command') AS command, eventTime FROM $EDS_ID WHERE eventSource='ecs.amazon.com' AND eventName='ExecuteCommand' AND eventTime > '2024-06-25 00:00:00'"
Monitor security group changes,Find security group changes made within the past week.,"SELECT eventName, userIdentity.arn AS user, sourceIPAddress, eventTime, element_at(requestParameters, 'groupId') AS securityGroup, element_at(requestParameters, 'ipPermissions') AS ipPermissions FROM $EDS_ID WHERE (element_at(requestParameters, 'groupId') LIKE '%sg-%') AND eventTime > '2024-06-25 00:00:00' ORDER BY eventTime ASC"
Monitor security group and network ACL changes,Find all security group and network ACL changes within the past week.,SELECT * FROM $EDS_ID WHERE ((eventName LIKE '%SecurityGroup%' OR eventName LIKE '%NetworkAcl%') AND eventName NOT LIKE 'Describe%') AND eventTime > '2024-06-25 00:00:00' ORDER BY eventTime ASC
Investigate service limit increases,Find all service limits increased across different regions and accounts within the past week.,"SELECT userIdentity.arn AS user, awsRegion, element_at(serviceEventDetails, 'serviceName') AS ServiceName, element_at(serviceEventDetails, 'quotaName') AS QuotaName, element_at(serviceEventDetails, 'createTime') AS RequestedOn, element_at(serviceEventDetails, 'newQuotaValue') AS NewLimitValue, element_at(serviceEventDetails, 'newStatus') AS Status FROM $EDS_ID WHERE eventSource='servicequotas.amazonaws.com' AND eventName in ('UpdateServiceQuotaIncreaseRequestStatus', 'RequestServiceQuotaIncrease') AND element_at(serviceEventDetails, 'serviceName') != '' AND eventTime > '2024-06-25 00:00:00' ORDER BY eventTime ASC"
Investigate manually created resources,Find all manually created resources within the past week.,"SELECT userIdentity.arn AS user, userIdentity, eventTime, eventSource, eventName, awsRegion, requestParameters, resources, requestID, eventID FROM $EDS_ID WHERE (eventName LIKE '%Create%') AND resources IS NOT NULL AND userIdentity.sessioncontext.sessionissuer.username NOT LIKE 'AWSServiceRole%' AND userIdentity.sessioncontext.sessionissuer.username IS NOT NULL AND sourceIpAddress != 'cloudformation.amazonaws.com' AND eventTime > '2024-06-25 00:00:00' ORDER BY eventTime DESC"
Monitor LakeFormation operations,Find all users who accessed a given database and table within the past week and show whether access was successful as configured in LakeFormation.,"SELECT eventSource, eventName, userIdentity.arn AS user, element_at(requestParameters, 'databaseName') AS DatabaseName, element_at(requestParameters, 'name') AS TableName, json_array_contains(json_parse(element_at(additionalEventData, 'insufficientLakeFormationPermissions')),'<DatabaseName>:<Table Name>') AS FailedAccess, eventTime FROM $EDS_ID WHERE eventSource ='glue.amazonaws.com' AND element_at(requestParameters, 'databaseName') = '<Database Name>' AND element_at(requestParameters, 'name') = '<Table Name>' AND element_at(additionalEventData, 'lakeFormationPrincipal') != '<ARN of Data Lake Admin Role>' AND eventTime > '2024-06-25 00:00:00'"
List Glue databases and tables,Find all Glue databases and tables viewed or modified by a given database administrator within the past week.,"SELECT element_at(requestParameters, 'databaseName') AS DatabaseName, element_at(requestParameters, 'name') AS TableName, eventName, userIdentity.arn AS user FROM $EDS_ID WHERE eventSource ='glue.amazonaws.com' AND element_at(requestParameters, 'databaseName') IS NOT NULL AND element_at(requestParameters, 'name') IS NOT NULL AND element_at(additionalEventData, 'lakeFormationPrincipal') != '<ARN of Data Lake Admin>' AND eventTime > '2024-06-25 00:00:00'"
Query over nested objects,Find all active S3 objects for the past week.,"SELECT accountid, eventName, eventTime, replace(resourceArn, 'arn:aws:s3:::') as s3Resource, useragent FROM $EDS_ID t CROSS JOIN UNNEST(t.resources) unnested (accountid, resourceType, resourceArn, resourceArnPrefix) WHERE eventSource='s3.amazonaws.com' AND eventTime > '2024-06-25 00:00:00'"
Identify activities for a specific access key,Find the records of all API activities performed with the matching accessKeyId.,"SELECT eventTime, eventName, userIdentity.principalId FROM $EDS_ID WHERE userIdentity.accessKeyId LIKE '<accessKeyId>' AND eventTime > '2024-06-25 00:00:00' ORDER BY eventTime DESC"
Identify failed console sign-in attempts,Find all unsuccessful console sign-in attempts.,"SELECT sourceipaddress, useridentity.arn, errorMessage, additionaleventdata FROM $EDS_ID WHERE eventname = 'ConsoleLogin' AND errorMessage IS NOT NULL AND eventTime > '2024-06-25 00:00:00' ORDER BY eventTime DESC"
Identify missing IAM permissions,Find all API events that failed due to missing permissions.,"SELECT count (*) as TotalEvents, eventsource, eventname, useridentity.arn, errorCode, errorMessage FROM $EDS_ID WHERE (errorcode like '%Denied%' or errorcode like '%Unauthorized%') AND eventTime > '2024-06-25 00:00:00' GROUP BY eventsource, eventname, errorCode, errorMessage, useridentity.arn ORDER BY eventsource, eventname"
Identify CloudTrail monthly cost increases,Find the events that increased your CloudTrail bill.,"SELECT eventName, count(eventName) AS apiCallCount, eventSource FROM $EDS_ID WHERE eventTime > '2024-06-02 00:00:00' GROUP BY eventName, eventSource ORDER BY apiCallCount DESC"
List all PutObject requests,Find all PutObject requests sorted by bytesTransferredIn in descending order.,"SELECT element_at(requestParameters, 'bucketName') AS s3BucketName, cast(element_at(additionalEventData, 'bytesTransferredIn') AS int) AS bytesTransferredIn FROM $EDS_ID WHERE eventName='PutObject' AND eventTime > '2024-06-25 00:00:00' ORDER BY bytesTransferredIn DESC"
Union results across multiple event data stores,Find all events across multiple event data stores using UNION ALL.,"SELECT eventsource, eventname, eventtime FROM $EDS_ID WHERE eventTime > date_add('day', -QUERY_TIME_RANGE_IN_DAYS.WEEKLY, now()) UNION ALL SELECT eventData.eventsource, eventData.eventname, eventData.eventtime FROM $INTEGRATION_EDS_ID WHERE eventData.eventtime > date_add('day', -QUERY_TIME_RANGE_IN_DAYS.WEEKLY, now())"
List all abandoned S3 buckets,Find all the buckets that haven't been accessed for more than a year.,"SELECT element_at(requestParameters, 'bucketName') AS bucketName, max(eventtime) AS lastActivityTime FROM $EDS_ID WHERE eventSource='s3.amazonaws.com' AND element_at(requestParameters, 'bucketName') IS NOT NULL GROUP BY 1 HAVING max(eventTime) < date_add('day', -365, now())"
List EC2 events,Find all EC2 events for the past 3 days.,"SELECT eventName, eventTime, element_at(requestParameters, 'name') AS TableName, userIdentity.principalId FROM $EDS_ID WHERE eventSource='ec2.amazonaws.com' AND eventTime > date_add('day', -3, now())"
List Athena StartQuery requestParameters,Find the catalog name for all Athena StartQuery requests,"SELECT eventTime, json_extract(element_at(requestParameters, 'queryExecutionContext'), '$.catalog') as catalog FROM $EDS_ID WHERE eventSource='athena.amazonaws.com' AND eventName='StartQueryExecution' AND eventTime > '2024-06-25 00:00:00'"
Matching prefix,Find all S3 requests that accessed the AWSLogs prefix of S3Buckets.,"SELECT element_at(requestParameters, 'bucketName') as s3BucketName, eventName, useridentity.arn FROM $EDS_ID WHERE regexp_like(element_at(requestParameters, 'key'), 'AWSLogs') AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'bucketName'), eventName, useridentity.arn"
Get usage by part of the globe,Find the usage of all events by part of the globe.,"SELECT substr(awsRegion, 1, 2) AS globalCode, count(*) AS totalNumberOfEvents FROM $EDS_ID WHERE eventTime > '2024-06-25 00:00:00' GROUP BY 1 ORDER BY totalNumberOfEvents DESC"
List IAM roles assumed to access services,List all the IAM roles assumed to access services.,"SELECT eventSource, array_agg(distinct userIdentity.arn) as AssumedRoles FROM $EDS_ID WHERE userIdentity.arn IS NOT NULL AND eventTime > '2024-06-25 00:00:00' GROUP BY eventSource"
Get actions in IAM policies,Find all actions in IAM policies.,"SELECT flatten(cast(transform(cast(json_extract(element_at(requestParameters, 'policyDocument'), '$.Statement[*].Action') as array(json)), x -> if(not try(is_json_scalar(x)), x, cast(array[cast(x as varchar)] as json))) as array(array(varchar)))) as actions FROM $EDS_ID WHERE element_at(requestParameters, 'policyDocument') is not null AND (eventSource like 'sts%' OR eventSource like 'iam%') AND eventTime > '2024-06-25 00:00:00'"
Get the users who made the most failed API calls,Find the users who made the most failed API calls within the past week.,"SELECT userIdentity.arn as user, COUNT(*) AS error_count FROM $EDS_ID WHERE errorCode IS NOT NULL AND userIdentity.arn IS NOT NULL AND eventTime > '2024-06-25 00:00:00' GROUP BY userIdentity.arn ORDER BY error_count DESC LIMIT 10"
Get IAM actions used in the most created IAM policies,Find the IAM actions used in the most created IAM policies.,"SELECT action, count(*) as iamActionUsageCount FROM $EDS_ID CROSS JOIN UNNEST(flatten(cast(transform(cast(json_extract(element_at(requestParameters, 'policyDocument'), '$.Statement[*].Action') as array(json)), x -> if(not try(is_json_scalar(x)), x, cast(array[cast(x as varchar)] as json))) as array(array(varchar))))) as t (action) WHERE element_at(requestParameters, 'policyDocument') is not null AND (eventSource like 'iam%') AND eventName = 'CreatePolicy' AND eventTime > '2024-06-25 00:00:00' GROUP BY action ORDER BY iamActionUsageCount DESC"
Get AWS services used in the most created IAM policies,Find the AWS services used in the most created IAM policies.,"SELECT element_at(split(action, ':'), 1) as awsService, count(*) as numberOfServiceActions FROM $EDS_ID CROSS JOIN UNNEST(flatten(cast(transform(cast(json_extract(element_at(requestParameters, 'policyDocument'), '$.Statement[*].Action') as array(json)), x -> if(not try(is_json_scalar(x)), x, cast(array[cast(x as varchar)] as json))) as array(array(varchar))))) as t (action) WHERE element_at(requestParameters, 'policyDocument') is not null AND (eventSource like 'iam%') AND eventName = 'CreatePolicy' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(split(action, ':'), 1) ORDER BY count(*) DESC"
Get least recently used IAM roles,Find the least recently used IAM roles.,"SELECT coalesce(element_at(requestParameters, 'roleName'), element_at(requestParameters, 'roleArn')) as roleName, max(eventTime) as lastUsage FROM $EDS_ID WHERE eventSource in ('sts.amazonaws.com', 'iam.amazonaws.com') AND eventTime > '2024-06-25 00:00:00' GROUP BY coalesce(element_at(requestParameters, 'roleName'), element_at(requestParameters, 'roleArn')) ORDER BY lastUsage ASC"
Get least recently assumed IAM roles,Find the least recently assumed IAM roles.,"SELECT element_at(requestParameters, 'roleArn') as roleArn, max(eventTime) as lastUsage FROM $EDS_ID WHERE eventSource = 'sts.amazonaws.com' AND eventName = 'AssumeRole' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'roleArn') ORDER BY lastUsage ASC"
Get the most frequently assumed IAM roles,Find the most frequently assumed IAM roles.,"SELECT element_at(requestParameters, 'roleArn') as roleArn, count(*) as timesAssumed FROM $EDS_ID WHERE eventSource = 'sts.amazonaws.com' AND eventName = 'AssumeRole' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'roleArn') ORDER BY timesAssumed DESC"
Investigate AssumeRole call failures,Find principal IDs whose AssumeRole calls failed.,"SELECT userIdentity.arn as callerRole, element_at(split(errorMessage, 'not authorized to perform: sts:AssumeRole on resource: '), 2) as failedToAssume FROM $EDS_ID WHERE eventSource = 'sts.amazonaws.com' AND eventName = 'AssumeRole' AND errorCode = 'AccessDenied' AND eventTime > '2024-06-25 00:00:00'"
List users who have turned off multi-factor authentication,Find the users who have turned off multi-factor authentication.,"SELECT userIdentity.arn, userIdentity.userName, userIdentity.accountId, useridentity.principalId FROM $EDS_ID WHERE eventSource = 'iam.amazonaws.com' AND eventName in ('DeactivateMFADevice', 'DeleteVirtualMFADevice') AND eventTime > '2024-06-25 00:00:00' GROUP BY userIdentity.arn, userIdentity.userName, userIdentity.accountId, useridentity.principalId"
List users who haven't changed their passwords recently,Find the users who haven't changed their passwords recently.,"SELECT userIdentity.arn, userIdentity.userName, userIdentity.accountId, max(eventTime) as lastPasswordChange FROM $EDS_ID WHERE eventName = 'ChangePassword' AND errorCode is NULL AND eventTime > '2024-06-25 00:00:00' GROUP BY userIdentity.arn, userIdentity.userName, userIdentity.accountId ORDER BY lastPasswordChange ASC"
Detect IAM user or role deletions,Find all IAM user and role deletions in the past week.,"SELECT eventtime AS deletion_time, useridentity.username AS deleted_identity, useridentity.type AS identity_type FROM $EDS_ID WHERE (eventname = 'DeleteUser' AND useridentity.type = 'IAMUser') OR (eventname = 'DeleteRole' AND useridentity.type = 'Role') AND eventTime > '2024-06-25 00:00:00'"
Track assume role calls within the same account,Find assume role calls within the same account.,"SELECT * FROM $EDS_ID WHERE eventName = 'AssumeRole' AND element_at(split(element_at(requestParameters, 'roleArn'), ':'), 5) = element_at(split(useridentity.arn, ':'), 5) AND eventTime > '2024-06-25 00:00:00'"
Track accounts making assume role calls,Find accounts making assume role calls.,"SELECT useridentity.accountId, count(*) as numberOfAssumeRoleCalls FROM $EDS_ID WHERE eventName = 'AssumeRole' AND eventTime > '2024-06-25 00:00:00' GROUP BY useridentity.accountId ORDER BY numberOfAssumeRoleCalls DESC"
List all IAM access key creation events,"Identify when IAM access keys were created, who created them on a particular day.",SELECT * FROM $EDS_ID WHERE eventName = 'CreateAccessKey' AND eventTime > '2024-06-25 00:00:00'
Get users that created access keys,Find users who created access keys.,"SELECT userIdentity.arn, userIdentity.userName, userIdentity.accountId, count(*) as accessKeyCreationCalls FROM $EDS_ID WHERE eventName = 'CreateAccessKey' AND eventTime > '2024-06-25 00:00:00' GROUP BY userIdentity.arn, userIdentity.userName, userIdentity.accountId ORDER BY accessKeyCreationCalls DESC"
Track IAM changes that modify access to actions that can be used for privilege escalation,Find IAM changes that modify access to actions that can be used for privilege escalation.,"SELECT events.* FROM $EDS_ID as events CROSS JOIN UNNEST(flatten(cast(transform(cast(json_extract(element_at(requestParameters, 'policyDocument'), '$.Statement[*].Action') as array(json)), x -> if(not try(is_json_scalar(x)), x, cast(array[cast(x as varchar)] as json))) as array(array(varchar))))) as t (action) WHERE element_at(requestParameters, 'policyDocument') is not null AND (eventSource like 'sts%' OR eventSource like 'iam%') AND action IN ('iam:AddRoleToInstanceProfile', 'iam:AddUserToGroup', 'iam:AttachGroupPolicy', 'iam:AttachRolePolicy', 'iam:AttachUserPolicy', 'iam:CreateAccessKey', 'iam:CreatePolicyVersion', 'iam:CreateRole', 'iam:DeleteRolePolicy', 'iam:DeleteUserPolicy', 'iam:DetachGroupPolicy', 'iam:DetachRolePolicy', 'iam:DetachUserPolicy', 'iam:PutGroupPolicy', 'iam:PutRolePolicy', 'iam:PutUserPolicy', 'iam:RemoveUserFromGroup', 'iam:SetDefaultPolicyVersion', 'iam:UpdateUser', 'sts:AssumeRole') AND eventTime > '2024-06-25 00:00:00' ORDER BY eventTime DESC"
Get API actions matching an IAM action-level statement,Find API actions matching an IAM action-level statement.,"SELECT eventId, useridentity FROM $EDS_ID CROSS JOIN (VALUES '{""Sid"": ""Statement1"",""Effect"": ""Allow"",""Action"": [""service1:ApiName"",""service2:*""],""Resource"": ""*""}') as iam (stmt) WHERE (contains(cast(json_extract(stmt, '$.Action') as array(varchar)), concat(element_at(split(eventsource, '.'), 1), ':', eventName)) OR contains(cast(json_extract(stmt, '$.Action') as array(varchar)), concat(element_at(split(eventsource, '.'), 1), ':*'))) AND cast(json_extract(stmt, '$.Effect') as varchar) = 'Allow' AND eventTime > '2024-06-25 00:00:00'"
Find AWS console logins without MFA,Find AWS console sign-in events without multi-factor authentication.,SELECT * FROM $EDS_ID WHERE eventName = 'ConsoleLogin' AND cast(useridentity.sessioncontext.attributes.mfaauthenticated as boolean) = false AND eventTime > '2024-06-25 00:00:00'
Find users most frequently signing in without MFA.,Find users who are most frequently signing in without multi-factor authentication.,"SELECT useridentity.principalid, useridentity.username, count(*) as numberOfUserLogins FROM $EDS_ID WHERE eventName = 'ConsoleLogin' AND cast(useridentity.sessioncontext.attributes.mfaauthenticated as boolean) = false AND eventTime > '2024-06-25 00:00:00' GROUP BY useridentity.principalid, useridentity.username ORDER BY numberOfUserLogins DESC"
Get list of policies created,Find the list of IAM policies created.,"SELECT json_extract(element_at(responseElements, 'policy'), '$.policyName') as policyName, json_extract(element_at(responseElements, 'policy'), '$.arn') as policyArn FROM $EDS_ID WHERE element_at(requestParameters, 'policyDocument') is not null AND eventName = 'CreatePolicy' AND eventTime > '2024-06-25 00:00:00'"
Get the list of roles with an IAM policy attached,Find the list of roles with an IAM policy attached.,"SELECT element_at(requestParameters,'roleName') as roleName FROM $EDS_ID WHERE eventName = 'AttachRolePolicy' AND element_at(requestParameters, 'policyArn') like 'arn:aws:iam::aws:policy/%' AND eventTime > '2024-06-25 00:00:00'"
Count EC2 instances running per month,Find the number of EC2 instances that are running per month.,"SELECT sum(json_array_length(json_extract(json_parse(element_at(responseElements, 'instancesSet')), '$.items'))) as numberOfRunInstances, date_trunc('month', eventTime) as month FROM $EDS_ID WHERE eventSource = 'ec2.amazonaws.com'AND eventName = 'RunInstances' AND eventTime > '2024-01-04 00:00:00' GROUP BY date_trunc('month', eventTime) ORDER BY month DESC"
Count non-terminated EC2 instances,Find EC2 instances that are not terminated.,"SELECT instances FROM $EDS_ID CROSS JOIN UNNEST(cast(json_extract(json_parse(element_at(responseElements, 'instancesSet')), '$.items[*].instanceId') as array(varchar))) as t (instances) WHERE eventSource = 'ec2.amazonaws.com' AND eventName = 'RunInstances' AND eventTime > '2024-06-25 00:00:00' EXCEPT SELECT instances FROM $EDS_ID CROSS JOIN UNNEST(cast(json_extract(json_parse(element_at(responseElements, 'instancesSet')), '$.items[*].instanceId') as array(varchar))) as t (instances) WHERE eventSource = 'ec2.amazonaws.com' AND eventName = 'TerminateInstances' AND eventTime > '2024-06-25 00:00:00'"
Count EC2 instances created by instance type by month,Find the number of EC2 instances created for each instance type on a monthly basis.,"SELECT instanceType, date_trunc('month', eventTime) as month, count(*) as countByInstanceType FROM $EDS_ID CROSS JOIN UNNEST(cast(json_extract(json_parse(element_at(responseElements, 'instancesSet')), '$.items[*].instanceType') as array(varchar))) as t (instanceType) WHERE eventSource = 'ec2.amazonaws.com' AND eventName = 'RunInstances' AND eventTime > '2024-01-04 00:00:00' GROUP BY instanceType, date_trunc('month', eventTime) ORDER BY month desc, countByInstanceType DESC"
Count EC2 instances created by instance type,Find the number of EC2 instances created for each instance type.,"SELECT instanceType, count(*) as countByInstanceType FROM $EDS_ID CROSS JOIN UNNEST(cast(json_extract(json_parse(element_at(responseElements, 'instancesSet')), '$.items[*].instanceType') as array(varchar))) as t (instanceType) WHERE eventSource = 'ec2.amazonaws.com' AND eventName = 'RunInstances' AND eventTime > '2024-06-25 00:00:00' GROUP BY instanceType ORDER BY countByInstanceType DESC"
List EC2 security group change events,Find EC2 security group change events.,"SELECT * FROM $EDS_ID WHERE eventSource = 'ec2.amazonaws.com' AND eventName IN ('AuthorizeSecurityGroupIngress', 'RevokeSecurityGroupIngress', 'AuthorizeSecurityGroupEgress', 'RevokeSecurityGroupEgress') AND eventTime > '2024-06-25 00:00:00'"
Count running EC2 instances per availability zone,Find the number of running EC2 instances per availability zone.,"SELECT availabilityZone, count(*) as countOfInstances FROM $EDS_ID CROSS JOIN unnest(cast(json_extract(element_at(responseelements, 'instancesSet'), '$.items[*].placement.availabilityZone') as array(varchar))) t (availabilityZone) WHERE eventSource = 'ec2.amazonaws.com' AND eventName = 'RunInstances' AND eventTime > '2024-06-25 00:00:00' GROUP BY availabilityZone ORDER BY countOfInstances DESC"
Track AMI usage to start EC2 instances,Find the number of EC2 instances started using each AMI and also find the first and last time the AMI was used.,"SELECT amiId, count(*) as CountOfInstances, max(eventTime) as finalTime, min(eventTime) as initialTime FROM $EDS_ID CROSS JOIN unnest(cast(json_extract(element_at(requestParameters, 'instancesSet'), '$.items[*].imageId') as array(varchar))) as t (amiId) WHERE eventSource = 'ec2.amazonaws.com' AND eventName = 'RunInstances' AND eventTime > '2024-06-25 00:00:00' GROUP BY amiId ORDER BY finalTime DESC"
Detect EBS default encryption disablement events,Find EBS default encryption disablement events.,SELECT * FROM $EDS_ID WHERE eventSource = 'ec2.amazonaws.com' AND eventName = 'DisableEbsEncryptionByDefault' AND eventTime > '2024-06-25 00:00:00'
Detect when an EBS snapshot is made public,Monitor API calls to detect when an EBS snapshot is made public.,"SELECT * FROM $EDS_ID WHERE eventSource = 'ec2.amazonaws.com' AND eventName = 'ModifySnapshotAttribute' AND element_at(requestparameters, 'attributeType') = 'CREATE_VOLUME_PERMISSION' AND element_at(requestparameters, 'createVolumePermission') is not NULL AND json_array_length(json_extract(element_at(requestparameters, 'createVolumePermission'), '$.add.items[?(@.group === ""all"")]')) > 0 AND eventTime > '2024-06-25 00:00:00'"
Detect the possible exfiltration of an EBS snapshot,Check if a possible attacker has created an EBS snapshot from the EBS volume and modified the permissions of the snapshot to allow it to be shared publicly or with another AWS account within a span of 15 minutes.,"SELECT createSnapshotDataStore.* FROM $EDS_ID as createSnapshotDataStore JOIN $EDS_ID as modifySnapshotDataStore ON element_at(createSnapshotDataStore.responseelements, 'snapshotId') = element_at(modifySnapshotDataStore.requestparameters, 'snapshotId') WHERE createSnapshotDataStore.eventSource = 'ec2.amazonaws.com' AND modifySnapshotDataStore.eventSource = 'ec2.amazonaws.com' AND createSnapshotDataStore.eventName = 'CreateSnapshot' AND modifySnapshotDataStore.eventName = 'ModifySnapshotAttribute' AND element_at(modifySnapshotDataStore.requestparameters, 'attributeType') = 'CREATE_VOLUME_PERMISSION' AND createSnapshotDataStore.eventTime > '2024-06-25 00:00:00' AND modifySnapshotDataStore.eventTime > '2024-06-25 00:00:00'"
Get age of S3 buckets,Find the age of each S3 bucket.,"SELECT element_at(requestParameters, 'bucketName') AS bucket_name, DATE_DIFF('millisecond', eventTime, now()) AS bucket_age_ms FROM $EDS_ID WHERE eventName = 'CreateBucket' AND eventTime > '2024-06-25 00:00:00' ORDER BY bucket_age_ms DESC"
Get the users making the most S3 API calls,Find the users making the most S3 API calls within the past week.,"SELECT userIdentity.arn, COUNT(*) AS s3_call_count FROM $EDS_ID WHERE eventSource = 's3.amazonaws.com' AND eventTime > '2024-06-25 00:00:00' GROUP BY userIdentity.arn ORDER BY s3_call_count DESC"
Identify most frequent access denied callers per S3 bucket,Find users whose S3 API calls fail frequently due to missing IAM permissions.,"SELECT element_at(requestParameters, 'bucketName') as bucketName, userIdentity.userName, userIdentity.arn, userIdentity.principalId, userIdentity.accountId, count(*) as failedCallCount FROM $EDS_ID WHERE errorCode = 'AccessDenied' AND eventSource = 's3.amazonaws.com' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'bucketName'), userIdentity.userName, userIdentity.arn, userIdentity.principalId, userIdentity.accountId ORDER BY failedCallCount DESC"
Get most throttled S3 buckets,Find the most throttled S3 buckets.,"SELECT element_at(requestParameters, 'bucketName') as bucketName, count(*) as failedCallCount FROM $EDS_ID WHERE errorCode IN ('InternalError', 'SlowDown', '503 SlowDown') AND eventSource = 's3.amazonaws.com' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'bucketName') ORDER BY failedCallCount DESC"
Get most throttled S3 buckets by month,Find the most throttled S3 buckets for each month.,"SELECT element_at(requestParameters, 'bucketName') as bucketName, date_trunc('month', eventTime) as month, count(*) as failedCallCount FROM $EDS_ID WHERE errorCode IN ('InternalError', 'SlowDown', '503 SlowDown') AND eventSource = 's3.amazonaws.com' AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'bucketName'), date_trunc('month', eventTime) ORDER BY failedCallCount DESC"
Get S3 buckets with most write requests,Find S3 buckets with most write requests.,"SELECT element_at(requestParameters, 'bucketName') as bucketName, count(*) as writeRequestCount FROM $EDS_ID WHERE eventSource='s3.amazonaws.com' AND regexp_like(eventName, '(?i)(Put|agResource|Update|Delete|Create|Upload|Copy)') AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'bucketName') ORDER BY writeRequestCount DESC"
Get S3 buckets with most write requests by month,Find S3 buckets with most write requests by month.,"SELECT element_at(requestParameters, 'bucketName') as bucketName, date_trunc('month', eventTime) as month, count(*) as writeRequestCount FROM $EDS_ID WHERE eventSource = 's3.amazonaws.com' AND regexp_like(eventName, '(?i)(Put|agResource|Update|Delete|Create|Upload|Copy)') AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'bucketName'), date_trunc('month', eventTime) ORDER BY month DESC, writeRequestCount DESC"
Get S3 buckets with most read requests,Find S3 buckets with most read requests.,"SELECT element_at(requestParameters, 'bucketName') as bucketName, count(*) as readRequestCount FROM $EDS_ID WHERE eventSource = 's3.amazonaws.com' and element_at(requestParameters, 'bucketName') is not NULL AND regexp_like(eventName, '(?i)(Get|Head|List)') AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'bucketName') ORDER BY readRequestCount DESC"
Get S3 buckets with most read requests by month,Find S3 buckets with most read requests by month.,"SELECT element_at(requestParameters, 'bucketName') as bucketName, date_trunc('month', eventTime) as month, count(*) as readRequestCount FROM $EDS_ID WHERE eventSource = 's3.amazonaws.com' and element_at(requestParameters, 'bucketName') is not NULL AND regexp_like(eventName, '(?i)(Get|Head|List)') AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'bucketName'), date_trunc('month', eventTime) ORDER BY month DESC, readRequestCount DESC"
Get least recently used S3 buckets,Find the least recently used S3 buckets.,"SELECT element_at(requestParameters, 'bucketName') as bucketName, max(eventTime) as lastUsage FROM $EDS_ID WHERE eventSource = 's3.amazonaws.com' and element_at(requestParameters, 'bucketName') is not NULL AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'bucketName') ORDER BY lastUsage ASC"
Track S3 bucket access changes,Find S3 bucket access changes.,"SELECT element_at(requestParameters, 'bucketName') as bucketName, eventTime, requestParameters FROM $EDS_ID WHERE eventsource = 's3.amazonaws.com' AND eventName in ('PutBucketAcl', 'DeleteBucketPolicy', 'PutBucketPolicy', 'PutBucketCors','PutBucketLifecycle', 'PutBucketReplication', 'DeleteBucketCors', 'DeleteBucketReplication') AND eventTime > '2024-06-25 00:00:00'"
Get ListBuckets calls coming from an EC2 instance profile,Find ListBuckets calls coming from an EC2 instance profile.,"SELECT DISTINCT element_at(split(element_at(split(useridentity.arn, ':'), -1), '/'), -1) as roleSessionName FROM $EDS_ID WHERE eventsource = 's3.amazonaws.com' AND eventName LIKE 'ListBuckets' AND element_at(split(element_at(split(useridentity.arn, ':'), -1), '/'), -1) LIKE 'i-%' AND eventTime > '2024-06-25 00:00:00'"
Get ListBuckets calls coming from an EC2 instance profile,Find ListBuckets calls coming from an EC2 instance profile.,"SELECT DISTINCT element_at(split(element_at(split(useridentity.arn, ':'), -1), '/'), -1) as roleSessionName FROM $EDS_ID WHERE eventsource = 's3.amazonaws.com' AND eventName LIKE 'ListBuckets' AND element_at(split(element_at(split(useridentity.arn, ':'), -1), '/'), -1) LIKE 'i-%' AND eventTime > '2024-06-25 00:00:00'"
Get ListBuckets calls coming from an EC2 instance profile,Find ListBuckets calls coming from an EC2 instance profile.,"SELECT DISTINCT element_at(split(element_at(split(useridentity.arn, ':'), -1), '/'), -1) as roleSessionName FROM $EDS_ID WHERE eventsource = 's3.amazonaws.com' AND eventName LIKE 'ListBuckets' AND element_at(split(element_at(split(useridentity.arn, ':'), -1), '/'), -1) LIKE 'i-%' AND eventTime > '2024-06-25 00:00:00'"
Track S3 public access configuration changes,Find S3 public access configuration changes.,"SELECT * FROM $EDS_ID WHERE eventSource = 's3.amazonaws.com' AND eventName in ('PutPublicAccessBlock', 'DeleteAccountPublicAccessBlock') AND eventTime > '2024-06-25 00:00:00'"
Track S3 log lifecycle expiration policy disablement events,Find events that disabled S3 log lifecycle expiration policies.,"SELECT * FROM $EDS_ID WHERE eventName = 'PutBucketLifecycle' AND eventTime < date_trunc('day', current_timestamp) AND eventTime > '2024-06-25 00:00:00' AND json_array_length(json_extract(element_at(requestParameters, 'LifecycleConfiguration'), '$.Rule[?(@.Status === ""Enabled"")]')) > 0 AND json_array_length(json_extract(element_at(requestParameters, 'LifecycleConfiguration'), '$.Rule[*].Expiration.Days')) > 0"
Track S3 log lifecycle expiration policies set to less than 90 days,Find S3 log lifecycle expiration policies that are set to less than 90 days.,"SELECT * FROM $EDS_ID WHERE eventName = 'PutBucketLifecycle' AND eventTime < date_trunc('day', current_timestamp) AND eventTime > '2024-06-25 00:00:00' AND json_array_length(json_extract(element_at(requestParameters, 'LifecycleConfiguration'), '$.Rule[?(@.Expiration.Days < 90)]')) > 0"
Track S3 buckets whose MFA is deleted or versioning is suspended,Find S3 buckets whose MFA is deleted or versioning is suspended.,"SELECT json_extract(element_at(requestParameters, 'VersioningConfiguration'), '$.Status'), requestParameters FROM $EDS_ID WHERE eventSource = 's3.amazonaws.com' AND eventTime > '2024-06-25 00:00:00' AND (cast(json_extract(element_at(requestParameters, 'VersioningConfiguration'), '$.Status') as varchar) = 'Suspended' OR cast(json_extract(element_at(requestParameters, 'VersioningConfiguration'), '$.MfaDelete') as varchar) = 'Disabled')"
Get age of DynamoDB tables,Find the age of each DynamoDB table.,"SELECT element_at(requestParameters, 'tableName') as tableName, DATE_DIFF('millisecond', eventTime, now()) AS table_age_ms FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' AND eventName = 'CreateTable' AND eventTime > '2024-06-25 00:00:00'"
Get usage of DynamoDB table indexes in queries,Find the usage of DynamoDB table indexes in queries.,"SELECT element_at(requestParameters, 'indexName') as indexName, count(*) AS indexUsageCount FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' AND eventName = 'Query' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'indexName') ORDER BY indexUsageCount DESC"
Get fields used in DynamoDB table scans,Find the fields used in DynamoDB table scans.,"SELECT element_at(requestParameters, 'tableName') as tableName, scanfields, count(*) as field_usage_count FROM $EDS_ID CROSS JOIN UNNEST(map_values(cast(json_parse(element_at(requestParameters, 'expressionAttributeNames')) as map(varchar, varchar)))) as t (scanfields) WHERE eventSource = 'dynamodb.amazonaws.com' AND eventName = 'Scan' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'tableName'), scanfields ORDER BY field_usage_count DESC"
Get fields used in DynamoDB table queries,Find the fields used in DynamoDB table queries.,"SELECT element_at(requestParameters, 'tableName') as tableName, queryfields, count(*) as field_usage_count FROM $EDS_ID CROSS JOIN UNNEST(map_values(cast(json_parse(element_at(requestParameters, 'expressionAttributeNames')) as map(varchar, varchar)))) as t (queryfields) WHERE eventSource = 'dynamodb.amazonaws.com' AND eventName = 'Query' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'tableName'), queryfields ORDER BY field_usage_count DESC"
Get frequently used DynamoDB table indexes by month,Find the most frequently used DynamoDB table indexes by month.,"SELECT element_at(requestParameters, 'indexName') as indexName, count(*) as indexUsageCount, date_trunc('month', eventTime) as month FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' AND eventName = 'Query' AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'indexName'), date_trunc('month', eventTime) ORDER BY month DESC, indexUsageCount DESC"
Get frequently used fields in DynamoDB scans by month,Find the fields most frequently used in DynamoDB scans by month.,"SELECT element_at(requestParameters, 'tableName') as tableName, scanfields, date_trunc('month', eventTime) as month, count(*) as field_usage_count FROM $EDS_ID CROSS JOIN UNNEST(map_values(cast(json_parse(element_at(requestParameters, 'expressionAttributeNames')) as map(varchar,varchar)))) as t (scanfields) WHERE eventSource = 'dynamodb.amazonaws.com'AND eventName = 'Scan' AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'tableName'), scanfields, date_trunc('month', eventTime) ORDER BY month DESC, field_usage_count DESC"
Get frequently used fields in DynamoDB queries by month,Find the fields most frequently used in DynamoDB queries by month.,"SELECT element_at(requestParameters, 'tableName') as tableName, queryfields, date_trunc('month', eventTime) as month, count(*) as field_usage_count FROM $EDS_ID CROSS JOIN UNNEST(map_values(cast(json_parse(element_at(requestParameters, 'expressionAttributeNames')) as map(varchar, varchar)))) as t (queryfields) WHERE eventSource = 'dynamodb.amazonaws.com' AND eventName = 'Query' AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'tableName'), queryfields, date_trunc('month', eventTime) ORDER BY month DESC, field_usage_count DESC"
Get most throttled DynamoDB tables,Get most throttled DynamoDB tables.,"SELECT element_at(requestParameters, 'tableName') as tableName, count(*) as throttledCallCount FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' AND (errorCode like '%Throttling%' OR errorCode like '%Exceeded%') AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'tableName') ORDER BY throttledCallCount DESC"
Get most throttled DynamoDB tables by month,Get most throttled DynamoDB tables by month.,"SELECT element_at(requestParameters, 'tableName') as tableName, date_trunc('month', eventTime) as month, count(*) as throttledCallCount FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' AND (errorCode like '%Throttling%' OR errorCode like '%Exceeded%') AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'tableName'), date_trunc('month', eventTime) ORDER BY month DESC, throttledCallCount DESC"
Get most throttled DynamoDB indexes,Get most throttled DynamoDB indexes.,"SELECT element_at(requestParameters, 'indexName') as indexName, count(*) as throttledCallCount FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' AND (errorCode like '%Throttling%' OR errorCode like '%Exceeded%') AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'indexName') ORDER BY throttledCallCount DESC"
Get most throttled DynamoDB indexes by month,Get most throttled DynamoDB indexes by month.,"SELECT element_at(requestParameters, 'indexName') as indexName, date_trunc('month', eventTime) as month, count(*) as throttledCallCount FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' AND (errorCode like '%Throttling%' OR errorCode like '%Exceeded%') AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'indexName'), date_trunc('month', eventTime) ORDER BY month DESC, throttledCallCount DESC"
Get DynamoDB tables with most write requests,Find DynamoDB tables with most write requests.,"SELECT element_at(requestParameters, 'tableName'), count(*) as countOfWrites FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' AND regexp_like(eventName, '(?i)(Write|Put|agResource|Delete|Update)') AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'tableName') ORDER BY countOfWrites DESC"
Get DynamoDB tables with most write requests by month,Find DynamoDB tables with most write requests by month.,"SELECT element_at(requestParameters, 'tableName'), date_trunc('month', eventTime) as month, count(*) as countOfWrites FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' AND regexp_like(eventName, '(?i)(Write|Put|agResource|Delete|Update)') AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'tableName'), date_trunc('month', eventTime) ORDER BY month DESC, countOfWrites DESC"
Get DynamoDB tables with most reads,Find DynamoDB tables with most read calls.,"SELECT resources[1].arn as tableIdentifier, count(*) as readRequestCount FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' and cardinality(resources) > 0 AND regexp_like(eventName, '(?i)(Get|Describe|Query|Scan|ListTags)') AND eventTime > '2024-06-25 00:00:00' GROUP BY resources[1].arn ORDER BY readRequestCount DESC"
Get DynamoDB tables with most read requests by month,Find DynamoDB tables with most read requests by month.,"SELECT resources[1].arn as tableIdentifier, date_trunc('month', eventTime) as month, count(*) as readRequestCount FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' and cardinality(resources) > 0 AND regexp_like(eventName, '(?i)(Get|Describe|Query|Scan|ListTags)') AND eventTime > '2024-01-04 00:00:00' GROUP BY resources[1].arn, date_trunc('month', eventTime) ORDER BY month DESC, readRequestCount DESC"
Get least recently used DynamoDB tables,Find the least recently used DynamoDB tables.,"SELECT element_at(requestParameters, 'tableName') as tableIdentifier, max(eventTime) as lastUsage FROM $EDS_ID WHERE eventSource = 'dynamodb.amazonaws.com' and element_at(requestParameters, 'tableName') is not NULL AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'tableName') ORDER BY lastUsage ASC"
Get age of non-terminated RDS instances,Find the age of non-terminated RDS instances.,"SELECT element_at(requestParameters, 'dBInstanceIdentifier') as instanceIdentifier, DATE_DIFF('millisecond', eventTime, now()) AS instance_age_ms FROM $EDS_ID WHERE eventsource = 'rds.amazonaws.com' AND eventname like 'Create%' AND element_at(requestParameters, 'dBInstanceIdentifier') != '' AND eventTime > '2024-06-25 00:00:00' AND element_at(requestParameters, 'dBInstanceIdentifier') not in ( SELECT element_at(requestParameters, 'dBInstanceIdentifier') FROM $EDS_ID WHERE eventsource = 'rds.amazonaws.com' AND eventname like 'Delete%' AND eventTime > '2024-06-25 00:00:00' )"
Get most frequently used KMS keys,Find the most frequently used KMS keys.,"SELECT kmsKey.arn, count(*) as keyUsageCount FROM $EDS_ID CROSS JOIN UNNEST(resources) as kmsKey (accountid, type, arn, last) WHERE eventsource='kms.amazonaws.com' AND eventName in ('Decrypt', 'Encrypt', 'GenerateDataKey', 'GenerateDataKeyWithoutPlaintext') AND eventTime > '2024-06-25 00:00:00' GROUP BY kmsKey.arn ORDER BY keyUsageCount DESC"
Get most frequent users of KMS keys,Find the most frequent users of KMS keys.,"SELECT distinct kmsKey.arn as keyArn, useridentity.arn as userArn, userAgent, count(*) as keyUsageCount FROM $EDS_ID CROSS JOIN UNNEST(resources) as kmsKey (accountid, type, arn, last) WHERE eventsource='kms.amazonaws.com' AND eventName in ('Decrypt', 'Encrypt', 'GenerateDataKey', 'GenerateDataKeyWithoutPlaintext') AND eventTime > '2024-06-25 00:00:00' GROUP BY kmsKey.arn, useridentity.arn, userAgent ORDER BY keyUsageCount DESC"
Get most frequently used KMS keys by month,Find the most frequently used KMS keys by month.,"SELECT kmsKey.arn, date_trunc('month', eventTime) as month, count(*) as keyUsageCount FROM $EDS_ID CROSS JOIN UNNEST(resources) as kmsKey (accountid, type, arn, last) WHERE eventsource='kms.amazonaws.com' AND eventName in ('Decrypt', 'Encrypt', 'GenerateDataKey', 'GenerateDataKeyWithoutPlaintext') AND eventTime > '2024-01-04 00:00:00' GROUP BY kmsKey.arn, date_trunc('month', eventTime) ORDER BY month desc, keyUsageCount DESC"
Get all aliases that have been assigned to each KMS key,Find all the aliases that have been assigned to each KMS key.,"SELECT element_at(requestParameters, 'targetKeyId') as keyId, array_agg(distinct element_at(requestParameters, 'aliasName')) as aliases FROM $EDS_ID WHERE eventsource ='kms.amazonaws.com' AND eventName in ('CreateAlias', 'UpdateAlias') AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'targetKeyId')"
Get the alias most recently assigned to each KMS key,Find the alias most recently assigned to each KMS key.,"SELECT element_at(requestParameters, 'targetKeyId') as keyId, max_by(distinct element_at(requestParameters, 'aliasName'), eventTime) as mostRecentAlias FROM $EDS_ID WHERE eventsource = 'kms.amazonaws.com' AND eventName in ('CreateAlias', 'UpdateAlias') AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'targetKeyId')"
Track the users whose KMS API calls failed due to missing IAM permissions,Find the users whose KMS API calls failed due to missing IAM permissions.,"SELECT distinct kmsKey.arn as keyArn, useridentity.arn as userArn, userAgent, count(*) as accessDeniedErrorCount FROM $EDS_ID CROSS JOIN UNNEST(resources) as kmsKey (accountid, type, arn, last) WHERE eventsource = 'kms.amazonaws.com' AND errorcode = 'AccessDenied' AND eventTime > '2024-06-25 00:00:00' GROUP BY kmsKey.arn, useridentity.arn, userAgent ORDER BY accessDeniedErrorCount DESC"
Get a list of resources subscribed to an SNS topic,Find the list of resources subscribed to an SNS topic.,"SELECT distinct element_at(subscribed.requestparameters, 'endpoint') as subscribedResources, element_at(subscribed.requestParameters, 'topicArn') as topicArn, element_at(subscribed.responseelements, 'subscriptionArn') as subscriptionArn FROM $EDS_ID as subscribed WHERE subscribed.eventSource = 'sns.amazonaws.com' AND subscribed.eventName = 'Subscribe' AND subscribed.errorCode is NULL AND element_at(subscribed.requestParameters, 'topicArn') = 'arn:aws:sns:us-east-1:123456789012:topicName' AND subscribed.eventTime > '2024-06-25 00:00:00' AND not exists ( SELECT element_at(unsubscribed.requestparameters, 'subscriptionArn') FROM $EDS_ID as unsubscribed WHERE unsubscribed.eventSource = 'sns.amazonaws.com' AND unsubscribed.eventName = 'Unsubscribe' AND unsubscribed.errorCode is NULL AND element_at(subscribed.responseelements, 'subscriptionArn') = element_at(unsubscribed.requestParameters, 'subscriptionArn') AND unsubscribed.eventTime > '2024-06-25 00:00:00' )"
Count the number of messages published per SNS topic,Find the count of messages published per SNS topic.,"SELECT element_at(requestParameters, 'topicArn') as topicArn, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'successful'))), 1)) as totalNumberOfMessages FROM $EDS_ID as subscribed WHERE eventSource = 'sns.amazonaws.com' AND eventName LIKE 'Publish%' AND errorCode is null AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'topicArn') ORDER BY totalNumberOfMessages DESC"
Count messages published by each SNS topic per month,Find the count of messages published per SNS topic per month.,"SELECT element_at(requestParameters, 'topicArn') as topicArn, date_trunc('month', eventTime) as month, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'successful'))), 1)) as totalNumberOfMessages FROM $EDS_ID as subscribed WHERE eventSource = 'sns.amazonaws.com' AND eventName LIKE 'Publish%' AND errorCode is null AND eventTime > '2024-01-04 00:00:00' GROUP BY date_trunc('month', eventTime) , element_at(requestParameters, 'topicArn') ORDER BY date_trunc('month', eventTime) DESC, totalNumberOfMessages DESC"
Count the number of SNS messages published per month,Find the count of SNS messages published per month.,"SELECT date_trunc('month', eventTime) as month, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'successful'))), 1)) as totalNumberOfMessages FROM $EDS_ID as subscribed WHERE eventSource = 'sns.amazonaws.com' AND eventName LIKE 'Publish%' AND errorCode is null AND eventTime > '2024-01-04 00:00:00' GROUP BY date_trunc('month', eventTime) ORDER BY date_trunc('month', eventTime) DESC"
Count the number of throttled SNS messages per topic,Find the count of throttled SNS messages per topic.,"SELECT element_at(requestParameters, 'topicArn') as topicArn, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'failed'))), 1)) as totalNumberOfMessages FROM $EDS_ID as subscribed WHERE eventSource = 'sns.amazonaws.com' AND eventName LIKE 'Publish%' AND errorCode LIKE 'Throttling%' AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'topicArn') ORDER BY totalNumberOfMessages DESC"
Count the number of throttled SNS messages per month,Find the total count of throttled SNS messages per month.,"SELECT date_trunc('month', eventTime) as month, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'failed'))), 1)) as totalNumberOfMessages FROM $EDS_ID as subscribed WHERE eventSource = 'sns.amazonaws.com' AND eventName LIKE 'Publish%' AND errorCode LIKE 'Throttling%' AND eventTime > '2024-01-04 00:00:00' GROUP BY date_trunc('month', eventTime) ORDER BY date_trunc('month', eventTime) DESC"
Count throttled SNS messages by each topic per month,Find the count of throttled SNS messages per topic on a monthly basis.,"SELECT element_at(requestParameters, 'topicArn') as topicArn, date_trunc('month', eventTime) as month, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'failed'))), 1)) as totalNumberOfMessages FROM $EDS_ID as subscribed WHERE eventSource = 'sns.amazonaws.com' AND eventName LIKE 'Publish%' AND errorCode LIKE 'Throttling%' AND eventTime > '2024-01-04 00:00:00' GROUP BY date_trunc('month', eventTime) , element_at(requestParameters, 'topicArn') ORDER BY date_trunc('month', eventTime) DESC, totalNumberOfMessages DESC"
Count SQS messages sent to each queue,Find the count of SQS messages sent per queue.,"SELECT element_at(requestParameters, 'queueUrl') as queueUrl, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'successful'))), 1)) as totalNumberOfMessages FROM $EDS_ID WHERE eventSource = 'sqs.amazonaws.com' AND eventName LIKE 'SendMessage%' AND errorcode is null AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'queueUrl') ORDER BY totalNumberOfMessages DESC"
Count SQS messages sent by each queue per month,Find the count of SQS messages sent per queue on a monthly basis.,"SELECT element_at(requestParameters, 'queueUrl') as queueUrl, date_trunc('month', eventTime) as month, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'successful'))), 1)) as totalNumberOfMessages FROM $EDS_ID WHERE eventSource = 'sqs.amazonaws.com' AND eventName LIKE 'SendMessage%' AND errorcode is null AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'queueUrl'), date_trunc('month', eventTime) ORDER BY month DESC, totalNumberOfMessages DESC"
Count total SQS messages sent per month,Find the count of SQS messages sent on a monthly basis.,"SELECT date_trunc('month', eventTime) as month, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'successful'))), 1)) as totalNumberOfMessages FROM $EDS_ID WHERE eventSource = 'sqs.amazonaws.com' AND eventName LIKE 'SendMessage%' AND errorcode is null AND eventTime > '2024-01-04 00:00:00' GROUP BY date_trunc('month', eventTime) ORDER BY month DESC, totalNumberOfMessages DESC"
Count throttled SQS messages in each queue,Find the count of throttled SQS messages per queue.,"SELECT element_at(requestParameters, 'queueUrl') as queueUrl, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'failed'))), 1)) as totalNumberOfMessages FROM $EDS_ID WHERE eventSource = 'sqs.amazonaws.com' AND eventName LIKE 'SendMessage%' AND errorcode like 'Throttling%' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'queueUrl') ORDER BY totalNumberOfMessages DESC"
Count throttled SQS messages in queues by month,Find the throttled SQS message count of queues on a monthly basis.,"SELECT element_at(requestParameters, 'queueUrl') as queueUrl, date_trunc('month', eventTime) as month, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'failed'))), 1)) as totalNumberOfMessages FROM $EDS_ID WHERE eventSource = 'sqs.amazonaws.com' AND eventName LIKE 'SendMessage%' AND errorcode like 'Throttling%' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'queueUrl'), date_trunc('month', eventTime) ORDER BY month DESC, totalNumberOfMessages DESC"
Count the number of throttled SQS messages per month,Find the count of throttled SQS messages per month.,"SELECT date_trunc('month', eventTime) as month, sum(coalesce(json_array_length(json_parse(element_at(responseelements, 'failed'))), 1)) as totalNumberOfMessages FROM $EDS_ID WHERE eventSource = 'sqs.amazonaws.com' AND eventName LIKE 'SendMessage%' AND errorcode like 'Throttling%' AND eventTime > '2024-01-04 00:00:00' GROUP BY date_trunc('month', eventTime) ORDER BY month DESC, totalNumberOfMessages DESC"
Detect EventBridge rule disablement and deletion events,Find EventBridge rule disablement and deletion events.,"SELECT * FROM $EDS_ID WHERE eventsource = 'events.amazonaws.com' AND eventName in ('DeleteRule', 'DisableRule') AND eventTime > '2024-06-25 00:00:00'"
Get list of distinct KMS key IDs,Find distinct KMS key IDs.,"SELECT distinct element_at(requestParameters, 'keyId') as kmsKeyId FROM $EDS_ID WHERE eventSource = 'kms.amazonaws.com' AND eventTime > '2024-06-25 00:00:00'"
Count readOnly calls made to Glue by different users,Find the number of readOnly calls made to Glue by different users in a day.,"SELECT useridentity.sessioncontext.sessionissuer.arn, COUNT(*) AS countOfReadOnlyCalls FROM $EDS_ID WHERE eventsource = 'glue.amazonaws.com' AND readonly = true AND eventTime > '2024-06-25 00:00:00' GROUP BY useridentity.sessioncontext.sessionissuer.arn ORDER BY countOfReadOnlyCalls DESC"
Get second of the day with the most readOnly Glue calls,Find the second of the day that has the most readOnly Glue calls.,"SELECT eventtime, COUNT(*) AS countOfReadOnlyCalls FROM $EDS_ID WHERE eventsource = 'glue.amazonaws.com' AND readonly = true AND eventTime > '2024-06-25 00:00:00' GROUP BY eventtime ORDER BY countOfReadOnlyCalls DESC"
Check how recently each Lambda function's code was updated,Check how recently each Lambda function's code was updated.,"SELECT element_at(requestParameters, 'functionName') as functionName, max(eventTime) as mostRecentUpdateTime FROM $EDS_ID WHERE eventSource = 'lambda.amazonaws.com' AND eventName LIKE 'UpdateFunction%' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'functionName') ORDER BY mostRecentUpdateTime"
Check the update frequency for each Lambda function,Check the update frequency of each Lambda function.,"SELECT element_at(requestParameters, 'functionName') as functionName, count(*) as countOfLambdaUpdates FROM $EDS_ID WHERE eventSource = 'lambda.amazonaws.com' AND eventName LIKE 'UpdateFunction%' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'functionName') ORDER BY countOfLambdaUpdates DESC"
Investigate who updated Lambda functions,Find the number of times each user updated Lambda functions.,"SELECT element_at(requestParameters, 'functionName') as functionName, useridentity.arn, count(*) as countOfLambdaUpdates FROM $EDS_ID WHERE eventSource = 'lambda.amazonaws.com' AND eventName LIKE 'UpdateFunction%' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'functionName'), useridentity.arn ORDER BY useridentity.arn, element_at(requestParameters, 'functionName'), countOfLambdaUpdates DESC"
Find the users with the most Lambda code contributions,Find the users with the most Lambda code contributions.,"SELECT useridentity.arn, count(*) as countOfLambdaUpdates FROM $EDS_ID WHERE eventSource = 'lambda.amazonaws.com' AND eventName LIKE 'UpdateFunction%' AND eventTime > '2024-06-25 00:00:00' GROUP BY useridentity.arn ORDER BY countOfLambdaUpdates DESC"
Find the users with the most Lambda code contributions by month,Find the users with the most Lambda code contributions on a monthly basis.,"SELECT useridentity.arn, date_trunc('month', eventTime), count(*) as countOfLambdaUpdates FROM $EDS_ID WHERE eventSource = 'lambda.amazonaws.com' AND eventName LIKE 'UpdateFunction%' AND eventTime > '2024-01-04 00:00:00' GROUP BY useridentity.arn, date_trunc('month', eventTime) ORDER BY date_trunc('month', eventTime) DESC, countOfLambdaUpdates DESC"
Track users that invoked Lambda functions,Find the users who invoked Lambda functions.,"SELECT useridentity.arn, count(*) as countOfLambdaInvocations FROM $EDS_ID WHERE eventSource = 'lambda.amazonaws.com' AND eventName LIKE 'Invoke%' AND eventTime > '2024-06-25 00:00:00' GROUP BY useridentity.arn ORDER BY countOfLambdaInvocations DESC"
Track users that invoked Lambda functions by month,Find the users who invoked Lambda functions on a monthly basis.,"SELECT useridentity.arn, date_trunc('month', eventTime), count(*) as countOfLambdaInvocations FROM $EDS_ID WHERE eventSource = 'lambda.amazonaws.com' AND eventName LIKE 'Invoke%' AND eventTime > '2024-01-04 00:00:00' GROUP BY useridentity.arn, date_trunc('month', eventTime) ORDER BY date_trunc('month', eventTime) DESC, countOfLambdaInvocations DESC"
Track Lambda invocation frequency,Find the number of Lambda invocations.,"SELECT element_at(requestParameters, 'functionName') as functionName, count(*) as countOfLambdaInvocations FROM $EDS_ID WHERE eventSource = 'lambda.amazonaws.com' AND eventName LIKE 'Invoke%' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'functionName') ORDER BY countOfLambdaInvocations DESC"
Track Lambda invocation frequency by month,Find the number of Lambda invocations on a monthly basis.,"SELECT element_at(requestParameters, 'functionName') as functionName, date_trunc('month', eventtime) as month, count(*) as countOfLambdaInvocations FROM $EDS_ID WHERE eventSource = 'lambda.amazonaws.com' AND eventName LIKE 'Invoke%' AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'functionName'), date_trunc('month', eventtime) ORDER BY month DESC, countOfLambdaInvocations DESC"
Track the user Lambda function invocation frequency by month,Find the number of Lambda invocations per user on a monthly basis.,"SELECT element_at(requestParameters, 'functionName') as functionName, useridentity.arn, date_trunc('month', eventTime) as month, count(*) as countOfLambdaInvocations FROM $EDS_ID WHERE eventSource = 'lambda.amazonaws.com' AND eventName LIKE 'Invoke%' AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'functionName'), date_trunc('month', eventTime), useridentity.arn ORDER BY month DESC, countOfLambdaInvocations DESC"
Get list of RDS instances created but not deleted,Get list of RDS instances created but not deleted.,"SELECT element_at(requestParameters, 'dBInstanceIdentifier') as dBInstanceIdentifier FROM $EDS_ID WHERE eventsource = 'rds.amazonaws.com' AND eventname like 'Create%' AND eventTime > '2024-06-25 00:00:00' EXCEPT SELECT element_at(requestParameters, 'dBInstanceIdentifier') as dBInstanceIdentifier FROM $EDS_ID WHERE eventsource = 'rds.amazonaws.com' AND eventname like 'Delete%' AND eventTime > '2024-06-25 00:00:00'"
Get list of RDS clusters created but not deleted,Get list of RDS clusters created but not deleted.,"SELECT element_at(requestParameters, 'dBClusterIdentifier') as clusterIdentifier FROM $EDS_ID WHERE eventsource = 'rds.amazonaws.com' AND eventname like 'Create%' AND element_at(requestParameters, 'dBClusterIdentifier') != '' AND eventTime > '2024-06-25 00:00:00' EXCEPT SELECT element_at(requestParameters, 'dBClusterIdentifier') as clusterIdentifier FROM $EDS_ID WHERE eventsource = 'rds.amazonaws.com' AND eventname like 'Delete%' AND eventTime > '2024-06-25 00:00:00'"
Get CloudFormation stack creation and deletion events,Find CloudFormation stack creation and deletion events.,"SELECT eventName, eventSource, eventTime, userIdentity.userName FROM $EDS_ID WHERE eventsource = 'cloudformation.amazonaws.com' AND eventName in ('CreateStack', 'DeleteStack') AND eventTime > '2024-06-25 00:00:00' ORDER BY eventtime desc"
Get least recently updated CloudFormation stacks,Find the least recently updated CloudFormation stacks.,"SELECT element_at(responseelements, 'stackId') as stackId, max(eventTime) as lastUpdateTime FROM $EDS_ID WHERE eventsource = 'cloudformation.amazonaws.com' AND eventName='UpdateStack' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(responseelements, 'stackId') ORDER BY lastUpdateTime ASC"
Get KMS key creation and deletion events,Find KMS key creation and deletion events.,"SELECT * FROM $EDS_ID WHERE eventsource = 'kms.amazonaws.com' AND eventName in ('CreateKey', 'ScheduleKeyDeletion') AND eventTime > '2024-06-25 00:00:00'"
Get list of SNS topic creation events,Find SNS topic creation events.,"SELECT element_at(requestParameters, 'name') as snsTopicName, element_at(requestParameters, 'attributes') as attributes, element_at(responseelements, 'topicArn') as topicArn FROM $EDS_ID WHERE eventSource = 'sns.amazonaws.com' AND eventName = 'CreateTopic' AND eventTime > '2024-06-25 00:00:00' ORDER BY eventTime DESC"
Get list of SNS topics that have not been deleted,Find the list of SNS topics that have not been deleted.,"SELECT element_at(responseelements, 'topicArn') as arn FROM $EDS_ID WHERE eventSource = 'sns.amazonaws.com' AND eventName = 'CreateTopic' AND eventTime > '2024-06-25 00:00:00' EXCEPT SELECT element_at(requestParameters, 'topicArn') as arn FROM $EDS_ID WHERE eventSource = 'sns.amazonaws.com' AND eventName = 'DeleteTopic' AND eventTime > '2024-06-25 00:00:00'"
Get SQS queue creation and deletion events,Find SQS queue creation and deletion events.,"SELECT * FROM $EDS_ID WHERE eventName in ('CreateQueue', 'DeleteQueue') AND eventTime > '2024-06-25 00:00:00'"
List ElastiCache serverless cluster modifications,Find the list of ElastiCache serverless cluster modifications.,"SELECT json_extract(element_at(responseElements, 'serverlessCache'), 'serverlessCacheName'), eventName, eventSource, eventTime, userIdentity.userName, requestparameters, responseelements FROM $EDS_ID WHERE eventSource = 'elasticache.amazonaws.com' AND eventName IN ('CreateServerlessCache', 'DeleteServerlessCache', 'ModifyServerlessCache') AND eventTime > '2024-06-25 00:00:00' ORDER BY eventTime DESC"
Track gateway configuration changes,Find all gateway configuration changes.,"SELECT * FROM $EDS_ID WHERE eventSource = 'ec2.amazonaws.com' AND eventName in ('CreateCustomerGateway', 'DeleteCustomerGateway', 'AttachInternetGateway', 'CreateInternetGateway', 'DeleteInternetGateway', 'DetachInternetGateway') AND eventTime > '2024-06-25 00:00:00'"
Count scaling actions per Auto Scaling group,Get the count of scaling actions per Auto Scaling group.,"SELECT element_at(requestParameters, 'autoScalingGroupName') as asgName, count(*) as countOfScalingActions FROM $EDS_ID WHERE eventSource = 'autoscaling.amazonaws.com' AND eventName = 'UpdateAutoScalingGroup' AND eventTime > '2024-06-25 00:00:00' GROUP BY element_at(requestParameters, 'autoScalingGroupName') ORDER BY countOfScalingActions DESC"
Count scaling actions of each Auto Scaling group per month,Find the number of scaling actions performed by each Auto Scaling group per month.,"SELECT element_at(requestParameters, 'autoScalingGroupName') as asgName, date_trunc('month', eventTime) as month, count(*) as countOfScalingActions FROM $EDS_ID WHERE eventSource = 'autoscaling.amazonaws.com' AND eventName = 'UpdateAutoScalingGroup' AND eventTime > '2024-01-04 00:00:00' GROUP BY element_at(requestParameters, 'autoScalingGroupName'), date_trunc('month', eventTime) ORDER BY date_trunc('month', eventTime) DESC, countOfScalingActions DESC"
Count the number of scaling actions each month,Get the count of scaling actions per month.,"SELECT date_trunc('month', eventTime) as month, count(*) as countOfScalingActions FROM $EDS_ID WHERE eventSource = 'autoscaling.amazonaws.com' AND eventName = 'UpdateAutoScalingGroup' AND eventTime > '2024-01-04 00:00:00' GROUP BY date_trunc('month', eventTime) ORDER BY date_trunc('month', eventTime) DESC, countOfScalingActions DESC"
Track Simple Email Service modification attempts,Find Simple Email Service modification attempts.,"SELECT * FROM $EDS_ID WHERE eventSource = 'ses.amazonaws.com' AND (eventname in ('VerifyEmailIdentity', 'CreateEmailIdentity', 'DeleteIdentity','DeleteEmailIdentity') OR (eventName = 'UpdateAccountSendingEnabled' AND element_at(requestParameters, 'enabled') is not null) OR (eventName = 'PutAccountSendingAttributes' AND element_at(requestParameters, 'sendingEnabled') is not null)) AND eventTime > '2024-06-25 00:00:00'"
Track log group deletion events,Find CloudWatch Logs log group deletion events.,SELECT * FROM $EDS_ID WHERE eventsource = 'cloudwatch.amazonaws.com' AND eventname = 'DeleteLogGroup' AND eventTime > '2024-06-25 00:00:00'
Track CloudWatch rules that are disabled or deleted,Find CloudWatch rules that are disabled and deleted.,"SELECT * FROM $EDS_ID WHERE eventsource = 'cloudwatch.amazonaws.com' AND eventname in ('DisableRule', 'DeleteRule') AND eventTime > '2024-06-25 00:00:00'"
Detect AWS Detective Graph deletions,Find AWS Detective Graph deletion events.,SELECT * FROM $EDS_ID WHERE eventSource = 'detective.amazonaws.com' AND eventName = 'DeleteGraph' AND eventTime > '2024-06-25 00:00:00'
Detect ECS cluster deletions,Find ECS cluster deletion events.,SELECT * FROM $EDS_ID WHERE eventSource = 'ec2.amazonaws.com' AND eventName = 'DeleteCluster' AND eventTime > '2024-06-25 00:00:00'
Detect EC2 subnet deletion,Detect EC2 subnet deletion.,SELECT * FROM $EDS_ID WHERE eventSource = 'ec2.amazonaws.com' AND eventName = 'DeleteSubnet' AND eventTime > '2024-06-25 00:00:00'
Track route table changes,Find changes to route tables.,"SELECT coalesce(element_at(requestParameters, 'routeTableId'), cast(json_extract(element_at(responseelements, 'routeTable'), '$.routeTableId') as varchar)) as routeTableId, element_at(requestParameters, 'vpcId') as vpcId, eventTime, requestParameters, responseElements FROM $EDS_ID WHERE eventsource = 'ec2.amazonaws.com' AND eventName in ('CreateRoute', 'ReplaceRoute', 'DeleteRoute', 'CreateRouteTable', 'DeleteRouteTable', 'DisassociateRouteTable', 'ReplaceRouteTableAssociation') AND eventTime > '2024-06-25 00:00:00'"
Track route table changes,Find changes to route tables.,"SELECT coalesce(element_at(requestParameters, 'routeTableId'), cast(json_extract(element_at(responseelements, 'routeTable'), '$.routeTableId') as varchar)) as routeTableId, element_at(requestParameters, 'vpcId') as vpcId, eventTime, requestParameters, responseElements FROM $EDS_ID WHERE eventsource = 'ec2.amazonaws.com' AND eventName in ('CreateRoute', 'ReplaceRoute', 'DeleteRoute', 'CreateRouteTable', 'DeleteRouteTable', 'DisassociateRouteTable', 'ReplaceRouteTableAssociation') AND eventTime > '2024-06-25 00:00:00'"
Track VPC deletion calls,Find VPC deletion calls.,SELECT * FROM $EDS_ID WHERE eventSource = 'ec2.amazonaws.com' AND eventName = 'DeleteVpc' AND eventTime > '2024-06-25 00:00:00'
Track network ACL configuration changes,Find network ACL configuration changes.,"SELECT * FROM $EDS_ID WHERE eventSource = 'ec2.amazonaws.com' AND eventName in ('CreateNetworkAcl', 'CreateNetworkAclEntry', 'DeleteNetworkAcl', 'DeleteNetworkAclEntry', 'ReplaceNetworkAclEntry', 'ReplaceNetworkAclAssociation') AND eventTime > '2024-06-25 00:00:00'"
List AWS accounts using the services,List all AWS accounts using the services.,"SELECT eventSource, array_agg(distinct recipientAccountId) as accounts FROM $EDS_ID WHERE eventTime > '2024-06-25 00:00:00' GROUP BY eventSource"
Get the AWS services used by most accounts,Find the AWS services used by most AWS accounts within the past week.,"SELECT eventsource as service, COUNT(DISTINCT userIdentity.accountId) AS account_count FROM $EDS_ID WHERE eventName != 'ConsoleLogin' AND eventTime > '2024-06-25 00:00:00' GROUP BY eventsource ORDER BY account_count DESC LIMIT 10"
Get the monthly usage for each AWS service,Find the usage of all AWS services on a monthly basis.,"SELECT eventSource as service, date_trunc('month', eventTime) as month, COUNT(*) AS service_count FROM $EDS_ID WHERE eventTime > '2024-01-04 00:00:00' GROUP BY eventSource, date_trunc('month', eventTime) ORDER BY month, service_count DESC"
Get the monthly usage of AWS services by distinct accounts,Find the monthly usage of AWS services by distinct accounts.,"SELECT eventSource as service, date_trunc('month', eventTime) as month, COUNT(DISTINCT userIdentity.accountId) AS account_count FROM $EDS_ID WHERE eventTime > '2024-01-04 00:00:00' GROUP BY eventSource, date_trunc('month', eventTime) ORDER BY month, account_count DESC"
Get account level usage of AWS services,Find the number of API calls made to AWS services by accounts.,"SELECT eventSource as service, userIdentity.accountId as account_id, COUNT(*) AS service_count FROM $EDS_ID WHERE eventName != 'ConsoleLogin' AND eventTime > '2024-06-25 00:00:00' GROUP BY eventSource, userIdentity.accountId ORDER BY service_count DESC, service"
Get account level usage of AWS services per month,Find the number of API calls made to AWS services by accounts each month.,"SELECT eventSource as service, userIdentity.accountId as account_id, date_trunc('month', eventTime) as month, COUNT(*) AS service_count FROM $EDS_ID WHERE eventName != 'ConsoleLogin' AND eventTime > '2024-01-04 00:00:00' GROUP BY eventSource, userIdentity.accountId, date_trunc('month', eventTime) ORDER BY month DESC, service_count DESC, service"
Get most common CloudTrail Lake queries,Find the most frequently run CloudTrail Lake queries.,"SELECT COALESCE(element_at(requestParameters, 'queryStatement'), element_at(requestParameters, 'queryAlias') ) as query, count(*) as numberOfExecutions FROM $EDS_ID WHERE eventSource = 'cloudtrail.amazonaws.com' AND eventName='StartQuery' AND eventTime > '2024-06-25 00:00:00' GROUP BY COALESCE(element_at(requestParameters, 'queryStatement'), element_at(requestParameters, 'queryAlias') ) ORDER BY numberOfExecutions DESC"
Get most common CloudTrail Lake queries by month,Find the most frequently run CloudTrail Lake queries in each month.,"SELECT COALESCE(element_at(requestParameters, 'queryStatement'), element_at(requestParameters, 'queryAlias') ) as query, date_trunc('month', eventTime) as month, count(*) as numberOfExecutions FROM $EDS_ID WHERE eventSource = 'cloudtrail.amazonaws.com' AND eventName='StartQuery' AND eventTime > '2024-01-04 00:00:00' GROUP BY date_trunc('month', eventTime), COALESCE(element_at(requestParameters, 'queryStatement'), element_at(requestParameters, 'queryAlias') ) ORDER BY month desc, numberOfExecutions DESC"
Find most active CloudTrail Lake users,Find most active CloudTrail Lake users.,"SELECT useridentity.arn, count(*) as queryExecutionCount FROM $EDS_ID WHERE eventsource = 'cloudtrail.amazonaws.com' AND eventName = 'StartQuery' AND eventTime > '2024-06-25 00:00:00' GROUP BY useridentity.arn ORDER BY queryExecutionCount DESC"
Get total AWS API usage by month,Find the total AWS API usage on a monthly basis.,"SELECT date_trunc('month', eventtime) as month, count(*) as countOfAPIInvocations FROM $EDS_ID WHERE eventTime > '2024-01-04 00:00:00' GROUP BY date_trunc('month', eventtime) ORDER BY date_trunc('month', eventtime) DESC"
Get total AWS API usage by time of day,Find the total AWS API usage by the time of day.,"SELECT hour(eventtime) as hour, count(*) as countOfAPIInvocations FROM $EDS_ID WHERE eventTime > '2024-06-25 00:00:00' GROUP BY hour(eventtime) ORDER BY hour(eventtime) DESC"
Track actions that could disable CloudTrail logging,Find actions that could disable CloudTrail logging.,"SELECT * FROM $EDS_ID WHERE eventSource = 'cloudtrail.amazonaws.com' AND eventName in ('DeleteEventDataStore', 'DeleteTrail', 'PutEventSelectors', 'PutInsightSelectors', 'StopEventDataStoreIngestion', 'StopLogging', 'UpdateEventDataStore', 'UpdateTrail') AND eventTime > '2024-06-25 00:00:00'"
Track AccessDenied events in the past week,Find the number of AccessDenied events in the past week.,"SELECT count(*) as numberOfAccessDeniedEvents FROM $EDS_ID WHERE errorCode = 'AccessDenied' AND eventtime >= date_add('day', -7, current_timestamp)"
Track AccessDenied events each day,Find the number of AccessDenied events each day.,"SELECT date_trunc('day', eventTime) as day, count(*) as numberOfAccessDeniedEvents FROM $EDS_ID WHERE errorCode = 'AccessDenied' AND eventTime > '2024-06-25 00:00:00' GROUP BY date_trunc('day', eventTime) ORDER BY date_trunc('day', eventTime) DESC"
Track users making more than 1000 AccessDenied calls in the past week,Find users making more than 1000 AccessDenied calls in the past week.,"SELECT userIdentity.userName, userIdentity.arn, userIdentity.principalId, userIdentity.accountId, count(*) as countOfCallsFailedWithAccessDenied FROM $EDS_ID WHERE errorCode = 'AccessDenied' AND eventtime >= date_add('day', -7, current_timestamp) GROUP BY userIdentity.userName, userIdentity.arn, userIdentity.principalId, userIdentity.accountId HAVING count(*) > 1000 ORDER BY countOfCallsFailedWithAccessDenied DESC"
Track Simple Email Service enumeration attempts,Find Simple Email Service enumeration attempts.,"SELECT * FROM $EDS_ID WHERE eventSource = 'ses.amazonaws.com' AND eventname in ('GetAccount', 'GetAccountSendingEnabled', 'ListIdentities', 'ListEmailIdentities','GetSendQuota', 'ListServiceQuotas', 'GetIdentityVerificationAttributes') AND eventTime > '2024-06-25 00:00:00'"
Track Simple Notification Service enumeration attempts,Find Simple Notification Service enumeration attempts.,"SELECT * FROM $EDS_ID WHERE eventSource = 'sns.amazonaws.com' AND eventname in ('GetSMSAttributes', 'GetSMSSandboxAccountStatus', 'ListOriginationNumbers', 'ListTopics', 'ListSubscriptions') AND eventTime > '2024-06-25 00:00:00'"
Track AWS accounts trying to leave AWS organization,Find AWS accounts trying to leave their organization.,SELECT * FROM $EDS_ID WHERE eventName = 'LeaveOrganization' AND eventTime > '2024-06-25 00:00:00'
Count the number of GetSecretValue calls per user,Find the number of times secret values are accessed by each user.,"SELECT useridentity.principalid, useridentity.username, count(*) as numberOfCalls FROM $EDS_ID WHERE eventSource = 'secretsmanager.amazonaws.com' AND eventName = 'GetSecretValue' AND eventTime > '2024-06-25 00:00:00' GROUP BY useridentity.principalid, useridentity.username ORDER BY numberOfCalls DESC"
Count the number of GetSecretValue calls for each user per month,Find the number of times secret values are accessed by each user per month.,"SELECT useridentity.principalid, useridentity.username, date_trunc('month', eventTime) as month, count(*) as numberOfCalls FROM $EDS_ID WHERE eventSource = 'secretsmanager.amazonaws.com' AND eventName = 'GetSecretValue' AND eventTime > '2024-01-04 00:00:00' GROUP BY useridentity.principalid, useridentity.username, date_trunc('month', eventTime) ORDER BY date_trunc('month', eventTime) DESC, numberOfCalls DESC"
Investigate GuardDuty Detector deletions,Find GuardDuty Detector deletions.,SELECT * FROM $EDS_ID WHERE eventSource = 'guardduty.amazonaws.com' AND eventName = 'DeleteDetector' AND eventTime > '2024-06-25 00:00:00'
Investigate AWS GuardDuty publishing destination deletions,Find AWS GuardDuty publishing destination deletions.,SELECT * FROM $EDS_ID WHERE eventSource = 'guardduty.amazonaws.com' AND eventName = 'DeletePublishingDestination' AND eventTime > '2024-06-25 00:00:00'
Investigate AWS GuardDuty threat intel set deletions,Find AWS GuardDuty threat intel set deletions.,SELECT * FROM $EDS_ID WHERE eventSource = 'guardduty.amazonaws.com' AND eventName = 'DeleteThreatIntelSet' AND eventTime > '2024-06-25 00:00:00'
Identify the user who broke compliance on a DynamoDB table,Find which user performed an action that resulted in a non-compliant status by joining a configuration item event data store with a CloudTrail event data store.,"SELECT element_at(config1.eventData.configuration, 'targetResourceId') as targetResourceId, element_at(config1.eventData.configuration, 'complianceType') as complianceType, config2.eventData.resourceType, cloudtrail.userIdentity FROM $CONFIG_EDS_ID as config1 JOIN $CONFIG_EDS_ID as config2 on element_at(config1.eventData.configuration, 'targetResourceId') = config2.eventData.resourceId JOIN $EDS_ID as cloudtrail on config2.eventData.arn = element_at(cloudtrail.resources, 1).arn WHERE element_at(config1.eventData.configuration, 'configRuleList') is not null AND element_at(config1.eventData.configuration, 'complianceType') = 'NON_COMPLIANT' AND cloudtrail.eventTime > '2024-06-25 00:00:00' AND config2.eventData.resourceType = 'AWS::DynamoDB::Table'"
Monitor AWS Config rule compliance,Find all AWS Config rules and return the compliance state from configuration items generated within the past day.,"SELECT eventData.configuration, eventData.accountId, eventData.awsRegion, eventData.resourceName, eventData.resourceCreationTime, element_at(eventData.configuration, 'complianceType') AS complianceType, element_at(eventData.configuration, 'configRuleList') AS configRuleList, element_at(eventData.configuration, 'resourceId') AS resourceId, element_at(eventData.configuration, 'resourceType') AS resourceType FROM $CONFIG_EDS_ID WHERE eventData.resourceType = 'AWS::Config::ResourceCompliance' AND eventTime > '2024-07-01 00:00:00' ORDER BY eventData.resourceCreationTime DESC limit 10"
List AWS Config rules attached to recorded resources,Find all resources recorded by AWS Config within the past week and return the compliance state of all AWS Config rules attached to the resources.,"SELECT eventData.configuration, eventData.accountId, eventData.awsRegion, eventData.resourceCreationTime AS resourceCreationTime, element_at(eventData.configuration, 'resourceId') AS resourceId, element_at(eventData.configuration, 'resourceType') AS resourceType, json_extract_scalar(element_at(eventData.configuration, 'configRuleList'),'$[0].configRuleName') AS configRuleName, json_extract_scalar(element_at(eventData.configuration, 'configRuleList'),'$[0].complianceType') AS complianceType FROM $CONFIG_EDS_ID WHERE eventData.resourceType = 'AWS::Config::ResourceCompliance' AND json_extract_scalar(element_at(eventData.configuration, 'configRuleList'),'$[0].complianceType') IS NOT NULL AND eventTime > '2024-06-25 00:00:00' UNION SELECT eventData.configuration, eventData.accountId, eventData.awsRegion, eventData.resourceCreationTime AS resourceCreationTime, element_at(eventData.configuration, 'resourceId') AS resourceId, element_at(eventData.configuration, 'resourceType') AS resourceType, json_extract_scalar(element_at(eventData.configuration, 'configRuleList'),'$[1].configRuleName') AS configRuleName, json_extract_scalar(element_at(eventData.configuration, 'configRuleList'),'$[1].complianceType') AS complianceType FROM $CONFIG_EDS_ID WHERE eventData.resourceType = 'AWS::Config::ResourceCompliance' AND json_extract_scalar(element_at(eventData.configuration, 'configRuleList'),'$[1].complianceType') IS NOT NULL AND eventTime > '2024-06-25 00:00:00' UNION SELECT eventData.configuration, eventData.accountId, eventData.awsRegion, eventData.resourceCreationTime AS resourceCreationTime, element_at(eventData.configuration, 'resourceId') AS resourceId, element_at(eventData.configuration, 'resourceType') AS resourceType, json_extract_scalar(element_at(eventData.configuration, 'configRuleList'),'$[2].configRuleName') AS configRuleName, json_extract_scalar(element_at(eventData.configuration, 'configRuleList'),'$[2].complianceType') AS complianceType FROM $CONFIG_EDS_ID WHERE eventData.resourceType = 'AWS::Config::ResourceCompliance' AND json_extract_scalar(element_at(eventData.configuration, 'configRuleList'),'$[2].complianceType') IS NOT NULL AND eventTime > '2024-06-25 00:00:00' ORDER BY resourceCreationTime DESC;"
AWS Config resource creation time,Find the resource creation time for all AWS Config configuration items generated on a specific date.,"SELECT eventData.configuration, eventData.accountId, eventData.awsRegion, eventData.resourceId, eventData.resourceName, eventData.resourceType, eventData.availabilityZone, eventData.resourceCreationTime FROM $CONFIG_EDS_ID WHERE eventTime > '2024-06-25 00:00:00' AND eventTime < '2024-06-26 00:00:00' ORDER BY eventData.resourceCreationTime DESC limit 10;"
"List instance ID, AMI ID, and tags","Find the instance ID, Amazon Machine Image (AMI) ID, and tags for the specified instance type and region.","SELECT element_at(eventData.configuration, 'imageId') as imageId, element_at(eventData.configuration, 'instanceId') AS instanceId, eventData.tags AS tags FROM $CONFIG_EDS_ID WHERE eventData.resourceType= 'AWS::EC2::Instance' AND eventData.awsRegion= 'us-east-1' AND eventTime > '2024-07-01 00:00:00'"
Total count of AWS Config resources,"Find the total count of AWS Config resources grouped by resource type, account ID, and region.","SELECT eventData.resourceType, eventData.awsRegion, eventData.accountId, COUNT (*) AS resourceCount FROM $CONFIG_EDS_ID WHERE eventTime > '2024-07-01 00:00:00' GROUP BY eventData.resourceType, eventData.awsRegion, eventData.accountId"
Filter AWS Config resources,Find all AWS Config resources matching the specified resource type and tag value.,"SELECT eventData.resourceId, eventData.resourceName, eventData.resourceType, eventData.accountId, eventData.tags AS tags FROM $CONFIG_EDS_ID WHERE eventData.resourceType = 'AWS::S3::Bucket' AND element_at(eventData.tags, '<tag key>')='<tag value>' AND eventTime > '2024-07-01 00:00:00'"
List AWS Config resources for a tag key,Find all AWS Config resources matching the specified tag key.,"SELECT eventData.resourceId, eventData.resourceName, eventData.resourceType, eventData.accountId, eventData.tags AS tags FROM $CONFIG_EDS_ID WHERE element_at(eventData.tags, '<tag key>')='<tag value>' AND eventTime > '2024-07-01 00:00:00'"
Get latest configuration item,Find the latest configuration item for each of your resources.,"SELECT eventData FROM ( SELECT eventData, rank() over (partition by eventData.resourceID order by eventData.configurationItemCaptureTime desc) as rnk FROM $CONFIG_EDS_ID ) as configPartition WHERE rnk = 1;"
Counts actions and gets the most recent action associated with each of your AWS Config tracked AWS resources,Counts actions and gets the most recent action associated with each of your AWS Config tracked AWS resources.,"SELECT eventData.resourceName, eventData.resourceId, count(*) as numAction, max_by(eventName, cloudtrail_events.eventTime) as mostRecentAction FROM $CONFIG_EDS_ID as config_items JOIN (SELECT ct.*, resourceArn FROM $EDS_ID as ct CROSS JOIN unnest(resources) as t (accountId, resourceType, resourceArn, arnPrefix)) as cloudtrail_events ON config_items.eventdata.arn = cloudtrail_events.resourceArn GROUP BY eventData.resourceId, eventData.resourceName ORDER BY numAction DESC"
Get resources in AWS Config with most AccessDenied actions,Finds the resources in AWS Config that have the most AccessDenied actions.,"SELECT eventData.resourceName, eventData.resourceId, count(*) as numAction, sum(case when errorCode = 'AccessDenied' then 1 else 0 end) as numDeniedActions, max_by(eventName, cloudtrail_events.eventTime) as mostRecentAction FROM $CONFIG_EDS_ID as config_items JOIN (SELECT ct.*, resourceArn FROM $EDS_ID as ct CROSS JOIN unnest(resources) as t (accountId, resourceType, resourceArn, arnPrefix)) as cloudtrail_events ON config_items.eventdata.arn = cloudtrail_events.resourceArn GROUP BY eventData.resourceId, eventData.resourceName ORDER BY numDeniedActions DESC"
Get resources in AWS Config with most errored API calls,Find the resources in AWS Config with most errored API calls.,"SELECT eventData.resourceName, eventData.resourceId, count(*) as numAction, sum(case when errorCode is not null then 1 else 0 end) as numErroredActions, max_by(eventName, cloudtrail_events.eventTime) as mostRecentAction FROM $CONFIG_EDS_ID as config_items JOIN (SELECT ct.*, resourceArn FROM $EDS_ID as ct CROSS JOIN unnest(resources) as t (accountId, resourceType, resourceArn, arnPrefix)) as cloudtrail_events ON config_items.eventdata.arn = cloudtrail_events.resourceArn GROUP BY eventData.resourceId, eventData.resourceName ORDER BY numErroredActions DESC"
Get resources in AWS Config with calls from the most distinct principals,Find the resources in AWS Config with calls from the most distinct principals.,"SELECT eventData.resourceName, eventData.resourceId, count(*) as numAction, count(distinct useridentity.principalId) as numDistinctCallers, max_by(eventName, cloudtrail_events.eventTime) as mostRecentAction FROM $CONFIG_EDS_ID as config_items JOIN (SELECT ct.*, resourceArn FROM $EDS_ID as ct CROSS JOIN unnest(resources) as t (accountId, resourceType, resourceArn, arnPrefix)) as cloudtrail_events ON config_items.eventdata.arn = cloudtrail_events.resourceArn GROUP BY eventData.resourceId, eventData.resourceName ORDER BY numDistinctCallers DESC"
Detect potential AWS Config disablement events,Find potential AWS Config disablement events.,"SELECT * FROM $EDS_ID WHERE eventsource = 'config.amazonaws.com' AND eventname in ('StopConfigurationRecorder', 'DeleteDeliveryChannel', 'PutDeliveryChannel', 'PutConfigurationRecorder') AND eventTime > '2024-06-25 00:00:00'"
Investigate evidence and its compliance status,"Find evidence with any compliance status across all assessments in account, within the past week.","SELECT eventData.evidenceId, eventData.resourceArn, eventData.resourceComplianceCheck FROM $EVIDENCE_EDS_ID WHERE eventTime > '2024-06-25 00:00:00'"
Determine non-compliant evidence for a control,Find all non-compliant evidence within the past week for a specific assessment and control.,"SELECT * FROM $EVIDENCE_EDS_ID WHERE eventData.assessmentId = '<assessmentId>' AND eventData.resourceComplianceCheck IN ('NON_COMPLIANT','FAILED','WARNING') AND eventData.controlId IN ('<controlId>') AND eventTime > '2024-06-25 00:00:00'"
Count evidence by name,"Lists the total evidence for an assessment within the past week, grouped by name and ordered by evidence count.","SELECT eventData.eventName as eventName, COUNT(*) as totalEvidence FROM $EVIDENCE_EDS_ID WHERE eventData.assessmentId = '<assessmentId>' AND eventTime > '2024-06-25 00:00:00' GROUP BY eventData.eventName ORDER BY totalEvidence DESC"
Explore evidence by data source and service,Find all evidence within the past week for a specific data source and service.,SELECT * FROM $EVIDENCE_EDS_ID WHERE eventData.service IN ('dynamodb') AND eventData.dataSource IN ('AWS API calls') AND eventTime > '2024-06-25 00:00:00'
Explore compliant evidence by data source and control domain,"Find compliant evidence for specific control domains, where the evidence comes from a data source that isn't AWS Config.","SELECT * FROM $EVIDENCE_EDS_ID WHERE eventData.resourceComplianceCheck IN ('PASSED','COMPLIANT') AND eventData.controlDomainName IN ('Logging and monitoring','Data security and privacy') AND eventData.dataSource NOT IN ('AWS Config') AND eventTime > '2024-06-25 00:00:00'"
Investigate Insights events,Find all CloudTrail management events that generated an Insights event.,"SELECT * FROM $EDS_ID AS me INNER JOIN (SELECT awsRegion, recipientAccountId, insightEventSource, insightEventName, MIN(eventTime) AS insight_start, MAX(eventTime) AS insight_end FROM $INSIGHTS_EDS_ID WHERE sharedEventID = '<sharedEventID>' GROUP BY 1, 2, 3, 4) AS ie ON me.awsRegion = ie.awsRegion AND me.recipientAccountId = ie.recipientAccountId AND me.eventSource = ie.insightEventSource AND me.eventName = ie.insightEventName AND me.eventTime >= ie.insight_start AND me.eventTime <= ie.insight_end ORDER BY me.eventTime"
Insights events caused by a user,Find all Insights events caused by a particular user within the past month.,"SELECT sharedEventID, eventTime, insightType, insightEventSource AS eventSource, insightEventName AS eventName, insightcontext.attributions[1].insightvalue AS user FROM $INSIGHTS_EDS_ID WHERE insightState = 'End' AND insightcontext.attributions[1].insightvalue LIKE '%<username>%' AND eventTime > '2024-06-02 00:00:00' ORDER BY eventTime DESC"
Rank the number of Insights events per day,Query the Insights event data store over the past month to rank the number of Insights events generated each day.,"SELECT DATE_TRUNC('day', eventTime) AS eventDate, COUNT(*) AS eventCount, DENSE_RANK() OVER(ORDER BY COUNT(*) DESC) AS eventRank FROM $INSIGHTS_EDS_ID WHERE insightState = 'End' AND insightType = 'ApiCallRateInsight' -- AND insightType = 'ApiErrorRateInsight' -- Filter on API error rate insights AND eventTime > '2024-06-02 00:00:00' GROUP BY DATE_TRUNC('day', eventTime) ORDER BY eventRank"
Top 10 Insights event errors,Find the top 10 errors that generated the most Insights events within the past month.,"SELECT insightErrorCode, COUNT(*) AS eventCount FROM $INSIGHTS_EDS_ID WHERE insightState = 'End' AND insightType = 'ApiCallErrorInsight' AND eventTime > '2024-06-02 00:00:00' GROUP BY insightErrorCode ORDER BY eventCount DESC LIMIT 10"
Top 10 Insights event sources,Find the top 10 event sources that generated the most Insights events within the past month.,"SELECT insightEventSource, -- insightEventName, -- Group by event name COUNT(*) AS eventCount FROM $INSIGHTS_EDS_ID WHERE insightState = 'End' AND insightType = 'ApiCallRateInsight' -- AND insightType = 'ApiErrorRateInsight' -- Filter on API error rate insights AND eventTime > '2024-06-02 00:00:00' GROUP BY insightEventSource -- insightEventName -- Group by event name ORDER BY eventCount DESC LIMIT 10"